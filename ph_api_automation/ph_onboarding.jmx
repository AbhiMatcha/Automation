<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="usernameAdmin" elementType="Argument">
            <stringProp name="Argument.name">usernameAdmin</stringProp>
            <stringProp name="Argument.value">nitishcoviam@gmail.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="passwordPassword" elementType="Argument">
            <stringProp name="Argument.name">passwordPassword</stringProp>
            <stringProp name="Argument.value">Test@123</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="username-Individual" elementType="Argument">
            <stringProp name="Argument.name">username-Individual</stringProp>
            <stringProp name="Argument.value">gouthamr102@gmail.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="password-Individual" elementType="Argument">
            <stringProp name="Argument.name">password-Individual</stringProp>
            <stringProp name="Argument.value">Admin@123</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="page" elementType="Argument">
            <stringProp name="Argument.name">page</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <boolProp name="HTTPArgument.use_equals">true</boolProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol">http</stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
      </CookieManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="pH-Onboarding-Admin" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1511947263000</longProp>
        <longProp name="ThreadGroup.end_time">1511947263000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-login" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;username&quot;:&quot;${usernameAdmin}&quot;,&quot;password&quot;:&quot;${passwordPassword}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/internal-api/login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://peoplehum.qa/login</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:56.0) Gecko/20100101 Firefox/56.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
            <stringProp name="VAR">code</stringProp>
            <stringProp name="JSONPATH">$.code</stringProp>
            <stringProp name="DEFAULT">ERROR</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1000&quot;)){
 	log.info(&quot;login success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;login fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-user/attribute" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/user/attribute</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="User attribute request header" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/teams/list</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:56.0) Gecko/20100101 Firefox/56.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
            <stringProp name="VAR">code</stringProp>
            <stringProp name="JSONPATH">$.status.code</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1000&quot;)){
 	log.info(&quot;user/attribute api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;user/attribute api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-Dashboard" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/user/search?page=0&amp;size=20&amp;sort=USER_PROFILE_V3_NAME,asc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="search request header" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/teams/list</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:56.0) Gecko/20100101 Firefox/56.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
            <stringProp name="VAR">onboarding_employee_list</stringProp>
            <stringProp name="JSONPATH">$.status.code</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import com.eclipsesource.json.*;

try{

	// check api success
	 String status=vars.get(&quot;onboarding_employee_list&quot;);
	 if(status.equals(&quot;1000&quot;)){
	 	log.info(&quot;onboarding_employee_list api success&quot;);
	 	System.out.println(&quot;onboarding_employee_list api success&quot;);
	 	prev.setSuccessful(true); 
	
		 // json validate
			String jsonString = prev.getResponseDataAsString();
			JsonObject response = JsonObject.readFrom(jsonString);
	          JsonObject responseObject = response.get(&quot;responseObject&quot;).asObject();
			JsonArray responseList = responseObject.get(&quot;responseList&quot;).asArray();
	          JsonNumber userId = responseList.get(0).asObject().get(&quot;userId&quot;);
	          JsonNumber customerId = responseList.get(0).asObject().get(&quot;customerId&quot;);		
			String name = responseList.get(0).asObject().get(&quot;name&quot;).asString();
			String email = responseList.get(0).asObject().get(&quot;email&quot;).asString();
			String providerSrc = responseList.get(0).asObject().get(&quot;providerSrc&quot;).asString(); 
			String userDesignation = responseList.get(0).asObject().get(&quot;userDesignation&quot;).asString(); 
			String jobDescription = responseList.get(0).asObject().get(&quot;jobDescription&quot;).asString(); 
			String status = responseList.get(0).asObject().get(&quot;status&quot;).asString(); 
			String timezone = responseList.get(0).asObject().get(&quot;timeZone&quot;).asString();
			String locale = responseList.get(0).asObject().get(&quot;locale&quot;).asString();
	          JsonObject reportingManager = responseList.get(0).asObject().get(&quot;reportingManager&quot;).asObject();
	          JsonNumber manageruserId = reportingManager.get(&quot;userId&quot;);
	          String maangername = reportingManager.get(&quot;name&quot;).asString();
	          String maangerdesignation = reportingManager.get(&quot;designation&quot;).asString();
	          String maangerjobDesc = reportingManager.get(&quot;jobDesc&quot;).asString();
	          String maangertimezone = reportingManager.get(&quot;timezone&quot;).asString();
	          String maangeruserLocale = reportingManager.get(&quot;userLocale&quot;).asString();
	          String maangeremail = reportingManager.get(&quot;email&quot;).asString();
	          JsonArray userRole = responseList.get(0).asObject().get(&quot;userRole&quot;).asArray();
	          JsonNumber userroleId = userRole.get(0).asObject().get(&quot;id&quot;);
	          String rolename = userRole.get(0).asObject().get(&quot;roleName&quot;).asString();
	          JsonArray userTeam = responseList.get(0).asObject().get(&quot;userTeam&quot;).asArray();
	          JsonNumber customerId = userTeam.get(0).asObject().get(&quot;customerId&quot;);
	          JsonNumber teamId = userTeam.get(0).asObject().get(&quot;teamId&quot;);
	          String teamName = userTeam.get(0).asObject().get(&quot;teamName&quot;).asString();
	          
	        //atrributes
			if(name != null) {
			   nameStr = name.toString();
			   if(nameStr != null @and nameStr.length() &gt; 0) {
			 	log.info(&quot;name property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;name property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(userId != null) {
			   userIdStr = userId.toString();
			   if(userIdStr != null @and userIdStr.length() &gt; 0) {
			 	log.info(&quot;userId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;userId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}				        
			if(customerId != null) {
			   customerIdStr = customerId.toString();
			   if(customerIdStr != null @and customerIdStr.length() &gt; 0) {
			 	log.info(&quot;customerId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;customerId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}	
			if(name != null) {
			   nameStr = name.toString();
			   if(nameStr != null @and nameStr.length() &gt; 0) {
			 	log.info(&quot;name property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;name property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}	
			if(email != null) {
			   emailStr = email.toString();
			   if(emailStr != null @and emailStr.length() &gt; 0) {
			 	log.info(&quot;email property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;email property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(providerSrc != null) {
			   providerSrcStr = providerSrc.toString();
			   if(providerSrcStr != null @and providerSrcStr.length() &gt; 0) {
			 	log.info(&quot;providerSrc property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;providerSrc property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(userDesignation != null) {
			   userDesignationStr = userDesignation.toString();
			   if(userDesignationStr != null @and userDesignationStr.length() &gt; 0) {
			 	log.info(&quot;userDesignation property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;userDesignation property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(jobDescription != null) {
			   jobDescriptionStr = jobDescription.toString();
			   if(jobDescriptionStr != null @and jobDescriptionStr.length() &gt; 0) {
			 	log.info(&quot;jobDescription property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;jobDescription property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(status != null) {
			   statusStr = status.toString();
			   if(statusStr != null @and statusStr.length() &gt; 0) {
			 	log.info(&quot;status property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;status property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(timezone != null) {
			   timezoneStr = timezone.toString();
			   if(timezoneStr != null @and timezoneStr.length() &gt; 0) {
			 	log.info(&quot;timezone property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;timezone property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(locale != null) {
			   localeStr = locale.toString();
			   if(localeStr != null @and localeStr.length() &gt; 0) {
			 	log.info(&quot;locale property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;locale property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}			
			if(manageruserId != null) {
			   manageruserIdStr = manageruserId.toString();
			   if(manageruserIdStr != null @and manageruserIdStr.length() &gt; 0) {
			 	log.info(&quot;manageruserId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;manageruserId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}	
			if(maangername != null) {
			   maangernameStr = maangername.toString();
			   if(maangernameStr != null @and maangernameStr.length() &gt; 0) {
			 	log.info(&quot;maangername property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;maangername property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(maangerdesignation != null) {
			   maangerdesignationStr = maangerdesignation.toString();
			   if(maangerdesignationStr != null @and maangerdesignationStr.length() &gt; 0) {
			 	log.info(&quot;maangerdesignation property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;maangerdesignation property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(maangerjobDesc != null) {
			   maangerjobDescStr = maangerjobDesc.toString();
			   if(maangerjobDescStr != null @and maangerjobDescStr.length() &gt; 0) {
			 	log.info(&quot;maangerjobDesc property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;maangerjobDesc property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(maangertimezone != null) {
			   maangertimezoneStr = maangertimezone.toString();
			   if(maangertimezoneStr != null @and maangertimezoneStr.length() &gt; 0) {
			 	log.info(&quot;maangertimezone property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;maangertimezone property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(maangeruserLocale != null) {
			   maangeruserLocaleStr = maangeruserLocale.toString();
			   if(maangeruserLocaleStr != null @and maangeruserLocaleStr.length() &gt; 0) {
			 	log.info(&quot;maangeruserLocale property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;maangeruserLocale property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}	
			if(maangeremail != null) {
			   maangeremailStr = maangeremail.toString();
			   if(maangeremailStr != null @and maangeremailStr.length() &gt; 0) {
			 	log.info(&quot;maangeremail property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;maangeremail property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(userroleId != null) {
			   userroleIdStr = userroleId.toString();
			   if(userroleIdStr != null @and userroleIdStr.length() &gt; 0) {
			 	log.info(&quot;userroleId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;userroleId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(rolename != null) {
			   rolenameStr = rolename.toString();
			   if(rolenameStr != null @and rolenameStr.length() &gt; 0) {
			 	log.info(&quot;rolename property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;rolename property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(customerId != null) {
			   customerIdStr = customerId.toString();
			   if(customerIdStr != null @and customerIdStr.length() &gt; 0) {
			 	log.info(&quot;customerId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;customerId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(teamId != null) {
			   teamIdStr = teamId.toString();
			   if(teamIdStr != null @and teamIdStr.length() &gt; 0) {
			 	log.info(&quot;teamId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;teamId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(teamName != null) {
			   teamNameStr = teamName.toString();
			   if(teamNameStr != null @and teamNameStr.length() &gt; 0) {
			 	log.info(&quot;teamName property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;teamName property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
	 } else if( (status == &quot;&quot; ) || (status == null )){
	  	log.info(&quot; onboarding_employee_list api fail&quot;);
	 	prev.setSuccessful(false); 	
	 } else{
	 	log.info(&quot; onboarding_employee_list api fail&quot;);
	 	prev.setSuccessful(false); 
	 } 		
} catch(Exception e){
	log.info(&quot;beanshell Exception &quot;+e));
	prev.setSuccessful(false);
} catch (FileNotFoundException e) {
     e.printStackTrace();
     prev.setSuccessful(false);
} catch (IOException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
} catch (ParseException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-Add/User" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/settings/social</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Add user request Header" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/people/list</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:56.0) Gecko/20100101 Firefox/56.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
            <stringProp name="VAR">code</stringProp>
            <stringProp name="JSONPATH">$.status.code</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1000&quot;)){
 	log.info(&quot;Add/User api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;Add/User api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Onboarding/QuickAdd/" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-Add/User/Quick" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[{&quot;name&quot;:&quot;${__RandomString(5,abcdef,)}&quot;,&quot;email&quot;:&quot;${__RandomString(5,abcdefghijklmnopqrstuvwxyz,apiemailuser)}@gmail.com&quot;}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/user/bulk</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Quick add request Header " enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/people/invite/quick-add</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:56.0) Gecko/20100101 Firefox/56.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import java.lang.*;
import org.json.JSONArray;

function getRandomEmail(domain,length)
{
    var text = &quot;&quot;;
    var possible = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;;

    for( var i=0; i &lt; length; i++ )
        text += possible.charAt(Math.floor(Math.random() * possible.length));

    return text + domain;
}

var email = getRandomEmail(&quot;@domain.com&quot;,15);
vars.put(&quot;email&quot;,email);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">apiemailuser = vars.get(&quot;apiemailuser&quot;);
System.out.println(apiemailuser);
apiemailuser = apiemailuser + &quot;@gmail.com&quot;;
vars.put(&quot;apiemailuser&quot;,apiemailuser);
</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
              <stringProp name="VAR">code</stringProp>
              <stringProp name="JSONPATH">$.status.code</stringProp>
              <stringProp name="DEFAULT">NOT_FOUND</stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1000&quot;)){
 	log.info(&quot;api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User-TeamCount" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="page" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">page</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="size" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">size</stringProp>
                  <stringProp name="Argument.value">15</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/team/root</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="User count Header " enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/people/list</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:56.0) Gecko/20100101 Firefox/56.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">totalUserCount</stringProp>
              <stringProp name="RegexExtractor.regex">$.responseObject.teamType.totalUserCount</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String value = vars.get(&quot;totalUserCount&quot;);
System.out.println(&quot;value=&quot;+value);
log.info(&quot;value is :&quot;+value);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">totalUserCount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.responseObject.teamType.totalUserCount</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">$1$</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
              <stringProp name="VAR">value</stringProp>
              <stringProp name="JSONPATH">$.responseObject.teamType.totalUserCount</stringProp>
              <stringProp name="DEFAULT">NOT_FOUND</stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
              <stringProp name="VAR">code</stringProp>
              <stringProp name="JSONPATH">$.status.code</stringProp>
              <stringProp name="DEFAULT">NOT_FOUND</stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1000&quot;)){
 	log.info(&quot;api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="false">
          <stringProp name="maximumValue">9999</stringProp>
          <stringProp name="minimumValue">1000</stringProp>
          <stringProp name="outputFormat"></stringProp>
          <boolProp name="perThread">true</boolProp>
          <stringProp name="randomSeed"></stringProp>
          <stringProp name="variableName">APIuser</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Onboarding-AddManually" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="onboarding-role" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/role</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="role  request Header " enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/people/invite/options</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">roleId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;id&quot;:(.+?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
            </RegexExtractor>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
              <stringProp name="VAR">code</stringProp>
              <stringProp name="JSONPATH">$.status.code</stringProp>
              <stringProp name="DEFAULT">NOT_FOUND</stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1000&quot;)){
 	log.info(&quot;api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="onboarding-job/function" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/job/function</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="jobfunction request Header " enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/people/invite/options</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
              <stringProp name="VAR">code</stringProp>
              <stringProp name="JSONPATH">$.status.code</stringProp>
              <stringProp name="DEFAULT">NOT_FOUND</stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1000&quot;)){
 	log.info(&quot;api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-user/manual" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;status&quot;:&quot;INVITED&quot;,&quot;userRole&quot;:[{&quot;id&quot;:&quot;${roleId}&quot;,&quot;roleName&quot;:&quot;ROLE_KEY_ADMINISTRATOR&quot;}],&quot;name&quot;:&quot;${__RandomString(5,abcdef,)}&quot;,&quot;email&quot;:&quot;${__RandomString(5,abcdefghijklmnopqrstuvwxyz,apiemailusermanual)}@gmail.com&quot;,&quot;jobDescription&quot;:&quot;Engineer&quot;,&quot;reportingManager&quot;:{&quot;userId&quot;:2,&quot;customerId&quot;:3,&quot;name&quot;:&quot;Nitish Jha&quot;,&quot;email&quot;:&quot;nitishcoviam@gmail.com&quot;,&quot;status&quot;:&quot;ACTIVE&quot;,&quot;userRole&quot;:[{&quot;id&quot;:2,&quot;roleName&quot;:&quot;ROLE_KEY_ADMINISTRATOR&quot;}],&quot;userTeam&quot;:[{&quot;customerId&quot;:3,&quot;teamId&quot;:2}],&quot;timeZone&quot;:&quot;Asia/Kolkata&quot;,&quot;locale&quot;:&quot;en-US&quot;,&quot;notificationSettings&quot;:[{&quot;id&quot;:4,&quot;type&quot;:&quot;FALCON_BELL&quot;,&quot;customerId&quot;:3,&quot;userId&quot;:2,&quot;enabled&quot;:true},{&quot;id&quot;:5,&quot;type&quot;:&quot;FALCON_MAIL&quot;,&quot;customerId&quot;:3,&quot;userId&quot;:2,&quot;enabled&quot;:true},{&quot;id&quot;:6,&quot;type&quot;:&quot;FALCON_BOT&quot;,&quot;customerId&quot;:3,&quot;userId&quot;:2,&quot;enabled&quot;:false}]},&quot;userDesignation&quot;:&quot;QA&quot;,&quot;userTeam&quot;:[{&quot;customerId&quot;:3,&quot;teamId&quot;:5,&quot;teamName&quot;:&quot;pH_QA&quot;,&quot;teamTypeName&quot;:&quot;TEAM&quot;}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/user</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="usermanual request Header " enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/people/invite/manually</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">apiemailusermanual = vars.get(&quot;apiemailusermanual&quot;);
System.out.println(apiemailusermanual);
apiemailusermanual = apiemailusermanual + &quot;@gmail.com&quot;;
vars.put(&quot;apiemailusermanual&quot;,apiemailusermanual);
//log.info(&quot;apiemailusermanual&quot;,apiemailusermanual);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">email</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;email&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
              <stringProp name="VAR">code</stringProp>
              <stringProp name="JSONPATH">$.status.code</stringProp>
              <stringProp name="DEFAULT">NOT_FOUND</stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1000&quot;)){
 	log.info(&quot;api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
            <stringProp name="VAR">code</stringProp>
            <stringProp name="JSONPATH">$.status.code</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1000&quot;)){
 	log.info(&quot;api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Onboarding-Usercount " enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="User-TeamCount" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="page" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">page</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="size" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">size</stringProp>
                  <stringProp name="Argument.value">20</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/team/root</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="user team count request Header " enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/people/list</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:56.0) Gecko/20100101 Firefox/56.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">totalUserCount</stringProp>
              <stringProp name="RegexExtractor.regex">$.responseObject.teamType.totalUserCount</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String value = vars.get(&quot;totalUserCount&quot;);
System.out.println(&quot;value=&quot;+value);
log.info(&quot;value is :&quot;+value);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">totalUserCount</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.responseObject.teamType.totalUserCount</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">$1$</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
              <stringProp name="VAR">value</stringProp>
              <stringProp name="JSONPATH">$.responseObject.teamType.totalUserCount</stringProp>
              <stringProp name="DEFAULT">NOT_FOUND</stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">totalUserCount</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;totalUserCount&quot;:(.+?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
int totalUserCount = Integer.parseInt(vars.get(&quot;totalUserCount&quot;).trim());
int result = (totalUserCount/20); 
System.out.println(result);
vars.put(&quot;result&quot;,String.valueOf(result));</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
              <stringProp name="VAR">code</stringProp>
              <stringProp name="JSONPATH">$.status.code</stringProp>
              <stringProp name="DEFAULT">NOT_FOUND</stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1000&quot;)){
 	log.info(&quot;api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
            <stringProp name="VAR">code</stringProp>
            <stringProp name="JSONPATH">$.status.code</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1000&quot;)){
 	log.info(&quot;api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Onboarding-Search/User/Email/Allpages" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${result}</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-user/search/email" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[{&quot;userSearchAttribute&quot;:{&quot;prefix&quot;:&quot;USER_V3&quot;,&quot;type&quot;:&quot;core&quot;,&quot;key&quot;:&quot;EMAIL&quot;},&quot;query&quot;:&quot;${email}&quot;}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/user/search?page=${page}&amp;size=20&amp;sort=USER_PROFILE_V3_NAME,asc</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/people/list</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">int page = Integer.parseInt(vars.get(&quot;page&quot;).ceil());
page=page+1;

System.out.println(page);
vars.put(&quot;page&quot;,String.valueOf(page));</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">userId</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;userId&quot;:(.+?),</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
              <stringProp name="VAR">code</stringProp>
              <stringProp name="JSONPATH">$.status.code</stringProp>
              <stringProp name="DEFAULT">NOT_FOUND</stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1000&quot;)){
 	log.info(&quot;api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
            <stringProp name="VAR">code</stringProp>
            <stringProp name="JSONPATH">$.status.code</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1000&quot;)){
 	log.info(&quot;api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-userByEdit" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/user/${userId}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/people/169</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
            <stringProp name="VAR">code</stringProp>
            <stringProp name="JSONPATH">$.status.code</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1000&quot;)){
 	log.info(&quot;api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-User/activate" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;customer_id&quot;:3,&quot;user_id&quot;:${userId}}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/user/${userId}/activate</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/people/169</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
            <stringProp name="VAR">code</stringProp>
            <stringProp name="JSONPATH">$.status.code</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1000&quot;)){
 	log.info(&quot;api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Onboarding-Settings" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-job/function" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/job/function</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Job function request Header " enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://peoplehum.qa/main/app/settings/file-status</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
              <stringProp name="VAR">code</stringProp>
              <stringProp name="JSONPATH">$.status.code</stringProp>
              <stringProp name="DEFAULT">NOT_FOUND</stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1000&quot;)){
 	log.info(&quot;api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-organisational/value" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/organisational/value</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Organization request Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://peoplehum.qa/main/app/settings/file-status</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
              <stringProp name="VAR">code</stringProp>
              <stringProp name="JSONPATH">$.status.code</stringProp>
              <stringProp name="DEFAULT">NOT_FOUND</stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1000&quot;)){
 	log.info(&quot;api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-goal/config" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/goals/v1.0/customer/3/goal/config</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Onboarding goal request Header " enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://peoplehum.qa/main/app/settings/file-status</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
              <stringProp name="VAR">code</stringProp>
              <stringProp name="JSONPATH">$.status.code</stringProp>
              <stringProp name="DEFAULT">NOT_FOUND</stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1000&quot;)){
 	log.info(&quot;api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-complaint/config" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/complaint-box/v1.0/customer/3/complaint/config</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Onboarding Complaint goal request Header " enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://peoplehum.qa/main/app/settings/internal</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
              <stringProp name="VAR">code</stringProp>
              <stringProp name="JSONPATH">$.status.code</stringProp>
              <stringProp name="DEFAULT">NOT_FOUND</stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1000&quot;)){
 	log.info(&quot;api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-dataprocessor-file/process" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="page" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">page</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="size" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">size</stringProp>
                  <stringProp name="Argument.value">20</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sort" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sort</stringProp>
                  <stringProp name="Argument.value">createdOn,desc</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/data-processor/v1/customer/3/file/process</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Data processor request  Header " enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://peoplehum.qa/main/app/settings/social</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
              <stringProp name="VAR">code</stringProp>
              <stringProp name="JSONPATH">$.status.code</stringProp>
              <stringProp name="DEFAULT">NOT_FOUND</stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1000&quot;)){
 	log.info(&quot;api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-settings/social" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/settings/social</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://peoplehum.qa/main/app/settings/internal</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
              <stringProp name="VAR">code</stringProp>
              <stringProp name="JSONPATH">$.status.code</stringProp>
              <stringProp name="DEFAULT">NOT_FOUND</stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1000&quot;)){
 	log.info(&quot;api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
            <stringProp name="VAR">code</stringProp>
            <stringProp name="JSONPATH">$.status.code</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1000&quot;)){
 	log.info(&quot;api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onnboarding-Export/type=csv" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/user/export?page=0&amp;size=100000&amp;type=csv</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Export-type-request Header " enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/people/list</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
            <stringProp name="VAR">code</stringProp>
            <stringProp name="JSONPATH">$.status.code</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1000&quot;)){
 	log.info(&quot;api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-Export/type=xls" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/user/export?page=0&amp;size=100000&amp;type=xls</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Export-type-xls request Header" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/people/list</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
            <stringProp name="VAR">code</stringProp>
            <stringProp name="JSONPATH">$.status.code</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1000&quot;)){
 	log.info(&quot;api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-showInactive=true" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;userSearchAttribute&quot;:{&quot;prefix&quot;:&quot;USER_PROFILE_V3&quot;,&quot;type&quot;:&quot;core&quot;,&quot;key&quot;:&quot;NAME&quot;},&quot;query&quot;:&quot;&quot;}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/user/search?page=1&amp;showInactive=true&amp;size=20&amp;sort=USER_PROFILE_V3_NAME,asc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/people/list</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
            <stringProp name="VAR">code</stringProp>
            <stringProp name="JSONPATH">$.status.code</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1000&quot;)){
 	log.info(&quot;api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-showInactive=false" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;userSearchAttribute&quot;:{&quot;prefix&quot;:&quot;USER_PROFILE_V3&quot;,&quot;type&quot;:&quot;core&quot;,&quot;key&quot;:&quot;NAME&quot;},&quot;query&quot;:&quot;&quot;}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/user/search?page=0&amp;showInactive=false&amp;size=20&amp;sort=USER_PROFILE_V3_NAME,asc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/people/list</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
            <stringProp name="VAR">code</stringProp>
            <stringProp name="JSONPATH">$.status.code</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1000&quot;)){
 	log.info(&quot;api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-internal-api/user-session/cancel" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/internal-api/user-session</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/people/invite/options</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
            <stringProp name="VAR">code</stringProp>
            <stringProp name="JSONPATH">$.code</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1000&quot;)){
 	log.info(&quot;api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-search/name" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;userSearchAttribute&quot;:{&quot;prefix&quot;:&quot;USER_PROFILE_V3&quot;,&quot;type&quot;:&quot;core&quot;,&quot;key&quot;:&quot;NAME&quot;},&quot;query&quot;:&quot;Ankit&quot;}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/user/search?page=0&amp;size=20&amp;sort=USER_PROFILE_V3_NAME,asc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/people/list</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
            <stringProp name="VAR">onboarding_employee_list</stringProp>
            <stringProp name="JSONPATH">$.status.code</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import com.eclipsesource.json.*;

try{
	// check api success
	 String status=vars.get(&quot;onboarding_employee_list&quot;);
	 if(status.equals(&quot;1000&quot;)){
	 	log.info(&quot;search by name onboarding_employee_list api success&quot;);
	 	prev.setSuccessful(true); 
	
		 // json validate
			String jsonString = prev.getResponseDataAsString();
			JsonObject response = JsonObject.readFrom(jsonString);
	          JsonObject responseObject = response.get(&quot;responseObject&quot;).asObject();
			JsonArray responseList = responseObject.get(&quot;responseList&quot;).asArray();
	          JsonNumber userId = responseList.get(0).asObject().get(&quot;userId&quot;);
	          JsonNumber customerId = responseList.get(0).asObject().get(&quot;customerId&quot;);		
			String name = responseList.get(0).asObject().get(&quot;name&quot;).asString();
			String email = responseList.get(0).asObject().get(&quot;email&quot;).asString();
			String providerSrc = responseList.get(0).asObject().get(&quot;providerSrc&quot;).asString(); 
			String userDesignation = responseList.get(0).asObject().get(&quot;userDesignation&quot;).asString(); 
			String jobDescription = responseList.get(0).asObject().get(&quot;jobDescription&quot;).asString(); 
			String status = responseList.get(0).asObject().get(&quot;status&quot;).asString(); 
			String timezone = responseList.get(0).asObject().get(&quot;timeZone&quot;).asString();
			String locale = responseList.get(0).asObject().get(&quot;locale&quot;).asString();
	          JsonObject reportingManager = responseList.get(0).asObject().get(&quot;reportingManager&quot;).asObject();
	          JsonNumber manageruserId = reportingManager.get(&quot;userId&quot;);
	          String maangername = reportingManager.get(&quot;name&quot;).asString();
	          
//	          String maangerdesignation = reportingManager.get(&quot;designation&quot;).asString();
//	          String maangerjobDesc = reportingManager.get(&quot;jobDesc&quot;).asString();
	          
	          String maangertimezone = reportingManager.get(&quot;timezone&quot;).asString();
	          String maangeruserLocale = reportingManager.get(&quot;userLocale&quot;).asString();
	          String maangeremail = reportingManager.get(&quot;email&quot;).asString();
	          JsonArray userRole = responseList.get(0).asObject().get(&quot;userRole&quot;).asArray();
	          JsonNumber userroleId = userRole.get(0).asObject().get(&quot;id&quot;);
	          String rolename = userRole.get(0).asObject().get(&quot;roleName&quot;).asString();
	          JsonArray userTeam = responseList.get(0).asObject().get(&quot;userTeam&quot;).asArray();
	          JsonNumber customerId = userTeam.get(0).asObject().get(&quot;customerId&quot;);
	          JsonNumber teamId = userTeam.get(0).asObject().get(&quot;teamId&quot;);
	          String teamName = userTeam.get(0).asObject().get(&quot;teamName&quot;).asString();
	          
	        //atrributes
			if(name != null) {
			   nameStr = name.toString();
			   if(nameStr != null @and nameStr.length() &gt; 0) {
			 	log.info(&quot;search by name : name property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by name : name property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(userId != null) {
			   userIdStr = userId.toString();
			   if(userIdStr != null @and userIdStr.length() &gt; 0) {
			 	log.info(&quot;search by name : userId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by name : userId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}				        
			if(customerId != null) {
			   customerIdStr = customerId.toString();
			   if(customerIdStr != null @and customerIdStr.length() &gt; 0) {
			 	log.info(&quot;search by name : customerId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by name : customerId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}	
			if(name != null) {
			   nameStr = name.toString();
			   if(nameStr != null @and nameStr.length() &gt; 0) {
			 	log.info(&quot;search by name : name property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by name : name property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}	
			if(email != null) {
			   emailStr = email.toString();
			   if(emailStr != null @and emailStr.length() &gt; 0) {
			 	log.info(&quot;search by name : email property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by name : email property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(providerSrc != null) {
			   providerSrcStr = providerSrc.toString();
			   if(providerSrcStr != null @and providerSrcStr.length() &gt; 0) {
			 	log.info(&quot;search by name : providerSrc property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by name : providerSrc property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(userDesignation != null) {
			   userDesignationStr = userDesignation.toString();
			   if(userDesignationStr != null @and userDesignationStr.length() &gt; 0) {
			 	log.info(&quot;search by name : userDesignation property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by name : userDesignation property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(jobDescription != null) {
			   jobDescriptionStr = jobDescription.toString();
			   if(jobDescriptionStr != null @and jobDescriptionStr.length() &gt; 0) {
			 	log.info(&quot;search by name : jobDescription property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by name : jobDescription property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(status != null) {
			   statusStr = status.toString();
			   if(statusStr != null @and statusStr.length() &gt; 0) {
			 	log.info(&quot;search by name : status property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by name : status property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(timezone != null) {
			   timezoneStr = timezone.toString();
			   if(timezoneStr != null @and timezoneStr.length() &gt; 0) {
			 	log.info(&quot;search by name : timezone property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by name : timezone property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(locale != null) {
			   localeStr = locale.toString();
			   if(localeStr != null @and localeStr.length() &gt; 0) {
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by name : locale property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}			
			if(manageruserId != null) {
			   manageruserIdStr = manageruserId.toString();
			   if(manageruserIdStr != null @and manageruserIdStr.length() &gt; 0) {
			 	log.info(&quot;search by name : manageruserId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by name : manageruserId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}	
			if(maangername != null) {
			   maangernameStr = maangername.toString();
			   if(maangernameStr != null @and maangernameStr.length() &gt; 0) {
			 	log.info(&quot;search by name : maangername property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by name : maangername property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			
//			if(maangerdesignation != null) {
//			   maangerdesignationStr = maangerdesignation.toString();
//			   if(maangerdesignationStr != null @and maangerdesignationStr.length() &gt; 0) {
//			 	log.info(&quot;search by name : maangerdesignation property : success&quot;);
//			 	System.out.println(&quot;search by name : maangerdesignation property : success&quot;);
//			 	prev.setSuccessful(true); 
//			   } else{
//				 	log.info(&quot;search by name : maangerdesignation property : fail&quot;);
//				 	System.out.println(&quot;search by name : maangerdesignation property : fail&quot;);
//				 	prev.setSuccessful(false); 		   	
//			   }
//			}
//			if(maangerjobDesc != null) {
//			   maangerjobDescStr = maangerjobDesc.toString();
//			   if(maangerjobDescStr != null @and maangerjobDescStr.length() &gt; 0) {
//			 	log.info(&quot;search by name : maangerjobDesc property : success&quot;);
//			 	System.out.println(&quot;search by name : maangerjobDesc property : success&quot;);
//			 	prev.setSuccessful(true); 
//			   } else{
//				 	log.info(&quot;search by name : maangerjobDesc property : fail&quot;);
//				 	System.out.println(&quot;search by name : maangerjobDesc property : fail&quot;);
//				 	prev.setSuccessful(false); 		   	
//			   }
//			}

			if(maangertimezone != null) {
			   maangertimezoneStr = maangertimezone.toString();
			   if(maangertimezoneStr != null @and maangertimezoneStr.length() &gt; 0) {
			 	log.info(&quot;search by name : maangertimezone property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by name : maangertimezone property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(maangeruserLocale != null) {
			   maangeruserLocaleStr = maangeruserLocale.toString();
			   if(maangeruserLocaleStr != null @and maangeruserLocaleStr.length() &gt; 0) {
			 	log.info(&quot;search by name : maangeruserLocale property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by name : maangeruserLocale property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}	
			if(maangeremail != null) {
			   maangeremailStr = maangeremail.toString();
			   if(maangeremailStr != null @and maangeremailStr.length() &gt; 0) {
			 	log.info(&quot;search by name : maangeremail property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by name : maangeremail property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(userroleId != null) {
			   userroleIdStr = userroleId.toString();
			   if(userroleIdStr != null @and userroleIdStr.length() &gt; 0) {
			 	log.info(&quot;search by name : userroleId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by name : userroleId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(rolename != null) {
			   rolenameStr = rolename.toString();
			   if(rolenameStr != null @and rolenameStr.length() &gt; 0) {
			 	log.info(&quot;search by name : rolename property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by name : rolename property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(customerId != null) {
			   customerIdStr = customerId.toString();
			   if(customerIdStr != null @and customerIdStr.length() &gt; 0) {
			 	log.info(&quot;search by name : customerId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by name : customerId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(teamId != null) {
			   teamIdStr = teamId.toString();
			   if(teamIdStr != null @and teamIdStr.length() &gt; 0) {
			 	log.info(&quot;search by name : teamId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by name : teamId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(teamName != null) {
			   teamNameStr = teamName.toString();
			   if(teamNameStr != null @and teamNameStr.length() &gt; 0) {
			 	log.info(&quot;search by name : teamName property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by name : teamName property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
	 } else if( (status == &quot;&quot; ) || (status == null )){
	  	log.info(&quot;search by name : onboarding_employee_list api fail&quot;);
	 	prev.setSuccessful(false); 	
	 } else{
	 	log.info(&quot;search by name : onboarding_employee_list api fail&quot;);
	 	prev.setSuccessful(false); 
	 } 		
} catch(Exception e){
	log.info(&quot;beanshell Exception &quot;+e);
     prev.setSuccessful(false);
} catch (FileNotFoundException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
} catch (IOException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
} catch (ParseException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-search/email" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;userSearchAttribute&quot;:{&quot;prefix&quot;:&quot;USER_V3&quot;,&quot;type&quot;:&quot;core&quot;,&quot;key&quot;:&quot;EMAIL&quot;},&quot;query&quot;:&quot;ankitsharan15@gmail.com&quot;}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/user/search?page=0&amp;size=20&amp;sort=USER_PROFILE_V3_NAME,asc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/people/list</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
            <stringProp name="VAR">onboarding_employee_list</stringProp>
            <stringProp name="JSONPATH">$.status.code</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import com.eclipsesource.json.*;

try{
	// check api success
	 String status=vars.get(&quot;onboarding_employee_list&quot;);
	 if(status.equals(&quot;1000&quot;)){
	 	log.info(&quot;search by email onboarding_employee_list api success&quot;);
	 	prev.setSuccessful(true); 
	
		 // json validate
			String jsonString = prev.getResponseDataAsString();
			JsonObject response = JsonObject.readFrom(jsonString);
	          JsonObject responseObject = response.get(&quot;responseObject&quot;).asObject();
			JsonArray responseList = responseObject.get(&quot;responseList&quot;).asArray();
	          JsonNumber userId = responseList.get(0).asObject().get(&quot;userId&quot;);
	          JsonNumber customerId = responseList.get(0).asObject().get(&quot;customerId&quot;);		
			String name = responseList.get(0).asObject().get(&quot;name&quot;).asString();
			String email = responseList.get(0).asObject().get(&quot;email&quot;).asString();
			String providerSrc = responseList.get(0).asObject().get(&quot;providerSrc&quot;).asString(); 
			String userDesignation = responseList.get(0).asObject().get(&quot;userDesignation&quot;).asString(); 
			String jobDescription = responseList.get(0).asObject().get(&quot;jobDescription&quot;).asString(); 
			String status = responseList.get(0).asObject().get(&quot;status&quot;).asString(); 
			String timezone = responseList.get(0).asObject().get(&quot;timeZone&quot;).asString();
			String locale = responseList.get(0).asObject().get(&quot;locale&quot;).asString();
	          JsonObject reportingManager = responseList.get(0).asObject().get(&quot;reportingManager&quot;).asObject();
	          JsonNumber manageruserId = reportingManager.get(&quot;userId&quot;);
	          String maangername = reportingManager.get(&quot;name&quot;).asString();
	          
//	          String maangerdesignation = reportingManager.get(&quot;designation&quot;).asString();
//	          String maangerjobDesc = reportingManager.get(&quot;jobDesc&quot;).asString();
	          
	          String maangertimezone = reportingManager.get(&quot;timezone&quot;).asString();
	          String maangeruserLocale = reportingManager.get(&quot;userLocale&quot;).asString();
	          String maangeremail = reportingManager.get(&quot;email&quot;).asString();
	          JsonArray userRole = responseList.get(0).asObject().get(&quot;userRole&quot;).asArray();
	          JsonNumber userroleId = userRole.get(0).asObject().get(&quot;id&quot;);
	          String rolename = userRole.get(0).asObject().get(&quot;roleName&quot;).asString();
	          JsonArray userTeam = responseList.get(0).asObject().get(&quot;userTeam&quot;).asArray();
	          JsonNumber customerId = userTeam.get(0).asObject().get(&quot;customerId&quot;);
	          JsonNumber teamId = userTeam.get(0).asObject().get(&quot;teamId&quot;);
	          String teamName = userTeam.get(0).asObject().get(&quot;teamName&quot;).asString();
	          
	        //atrributes
			if(name != null) {
			   nameStr = name.toString();
			   if(nameStr != null @and nameStr.length() &gt; 0) {
			 	log.info(&quot;search by email : name property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by email : name property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(userId != null) {
			   userIdStr = userId.toString();
			   if(userIdStr != null @and userIdStr.length() &gt; 0) {
			 	log.info(&quot;search by email : userId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by email : userId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}				        
			if(customerId != null) {
			   customerIdStr = customerId.toString();
			   if(customerIdStr != null @and customerIdStr.length() &gt; 0) {
			 	log.info(&quot;search by email : customerId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by email : customerId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}	
			if(name != null) {
			   nameStr = name.toString();
			   if(nameStr != null @and nameStr.length() &gt; 0) {
			 	log.info(&quot;search by email : name property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by email : name property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}	
			if(email != null) {
			   emailStr = email.toString();
			   if(emailStr != null @and emailStr.length() &gt; 0) {
			 	log.info(&quot;search by email : email property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by email : email property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(providerSrc != null) {
			   providerSrcStr = providerSrc.toString();
			   if(providerSrcStr != null @and providerSrcStr.length() &gt; 0) {
			 	log.info(&quot;search by email : providerSrc property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by email : providerSrc property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(userDesignation != null) {
			   userDesignationStr = userDesignation.toString();
			   if(userDesignationStr != null @and userDesignationStr.length() &gt; 0) {
			 	log.info(&quot;search by email : userDesignation property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by email : userDesignation property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(jobDescription != null) {
			   jobDescriptionStr = jobDescription.toString();
			   if(jobDescriptionStr != null @and jobDescriptionStr.length() &gt; 0) {
			 	log.info(&quot;search by email : jobDescription property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by email : jobDescription property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(status != null) {
			   statusStr = status.toString();
			   if(statusStr != null @and statusStr.length() &gt; 0) {
			 	log.info(&quot;search by email : status property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by email : status property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(timezone != null) {
			   timezoneStr = timezone.toString();
			   if(timezoneStr != null @and timezoneStr.length() &gt; 0) {
			 	log.info(&quot;search by email : timezone property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by email : timezone property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(locale != null) {
			   localeStr = locale.toString();
			   if(localeStr != null @and localeStr.length() &gt; 0) {
			 	log.info(&quot;search by email : locale property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by email : locale property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}			
			if(manageruserId != null) {
			   manageruserIdStr = manageruserId.toString();
			   if(manageruserIdStr != null @and manageruserIdStr.length() &gt; 0) {
			 	log.info(&quot;search by email : manageruserId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by email : manageruserId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}	
			if(maangername != null) {
			   maangernameStr = maangername.toString();
			   if(maangernameStr != null @and maangernameStr.length() &gt; 0) {
			 	log.info(&quot;search by email : maangername property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by email : maangername property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			
//			if(maangerdesignation != null) {
//			   maangerdesignationStr = maangerdesignation.toString();
//			   if(maangerdesignationStr != null @and maangerdesignationStr.length() &gt; 0) {
//			 	log.info(&quot;search by email : maangerdesignation property : success&quot;);
//			 	System.out.println(&quot;search by email : maangerdesignation property : success&quot;);
//			 	prev.setSuccessful(true); 
//			   } else{
//				 	log.info(&quot;search by email : maangerdesignation property : fail&quot;);
//				 	System.out.println(&quot;search by email : maangerdesignation property : fail&quot;);
//				 	prev.setSuccessful(false); 		   	
//			   }
//			}
//			if(maangerjobDesc != null) {
//			   maangerjobDescStr = maangerjobDesc.toString();
//			   if(maangerjobDescStr != null @and maangerjobDescStr.length() &gt; 0) {
//			 	log.info(&quot;search by email : maangerjobDesc property : success&quot;);
//			 	System.out.println(&quot;search by email : maangerjobDesc property : success&quot;);
//			 	prev.setSuccessful(true); 
//			   } else{
//				 	log.info(&quot;search by email : maangerjobDesc property : fail&quot;);
//				 	System.out.println(&quot;search by email : maangerjobDesc property : fail&quot;);
//				 	prev.setSuccessful(false); 		   	
//			   }
//			}

			if(maangertimezone != null) {
			   maangertimezoneStr = maangertimezone.toString();
			   if(maangertimezoneStr != null @and maangertimezoneStr.length() &gt; 0) {
			 	log.info(&quot;search by email : maangertimezone property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by email : maangertimezone property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(maangeruserLocale != null) {
			   maangeruserLocaleStr = maangeruserLocale.toString();
			   if(maangeruserLocaleStr != null @and maangeruserLocaleStr.length() &gt; 0) {
			 	log.info(&quot;search by email : maangeruserLocale property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by email : maangeruserLocale property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}	
			if(maangeremail != null) {
			   maangeremailStr = maangeremail.toString();
			   if(maangeremailStr != null @and maangeremailStr.length() &gt; 0) {
			 	log.info(&quot;search by email : maangeremail property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by email : maangeremail property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(userroleId != null) {
			   userroleIdStr = userroleId.toString();
			   if(userroleIdStr != null @and userroleIdStr.length() &gt; 0) {
			 	log.info(&quot;search by email : userroleId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by email : userroleId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(rolename != null) {
			   rolenameStr = rolename.toString();
			   if(rolenameStr != null @and rolenameStr.length() &gt; 0) {
			 	log.info(&quot;search by email : rolename property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by email : rolename property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(customerId != null) {
			   customerIdStr = customerId.toString();
			   if(customerIdStr != null @and customerIdStr.length() &gt; 0) {
			 	log.info(&quot;search by email : customerId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by email : customerId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(teamId != null) {
			   teamIdStr = teamId.toString();
			   if(teamIdStr != null @and teamIdStr.length() &gt; 0) {
			 	log.info(&quot;search by email : teamId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by email : teamId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(teamName != null) {
			   teamNameStr = teamName.toString();
			   if(teamNameStr != null @and teamNameStr.length() &gt; 0) {
			 	log.info(&quot;search by email : teamName property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by email : teamName property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
	 } else if( (status == &quot;&quot; ) || (status == null )){
	  	log.info(&quot;search by email : onboarding_employee_list api fail&quot;);
	 	prev.setSuccessful(false); 	
	 } else{
	 	log.info(&quot;search by email : onboarding_employee_list api fail&quot;);
	 	prev.setSuccessful(false); 
	 } 		
} catch(Exception e){
	log.info(&quot;beanshell Exception &quot;+e.getMessage());
     prev.setSuccessful(false);
} catch (FileNotFoundException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
} catch (IOException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
} catch (ParseException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-search/team" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;userSearchAttribute&quot;:{&quot;prefix&quot;:&quot;USER_TEAM_V3&quot;,&quot;type&quot;:&quot;core&quot;,&quot;key&quot;:&quot;TEAM_ID&quot;},&quot;query&quot;:&quot;11&quot;}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/user/search?page=0&amp;size=20&amp;sort=USER_PROFILE_V3_NAME,asc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/people/list</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
            <stringProp name="VAR">onboarding_employee_list</stringProp>
            <stringProp name="JSONPATH">$.status.code</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import com.eclipsesource.json.*;

try{
	// check api success
	 String status=vars.get(&quot;onboarding_employee_list&quot;);
	 if(status.equals(&quot;1000&quot;)){
	 	log.info(&quot;search by team onboarding_employee_list api success&quot;);
	 	prev.setSuccessful(true); 
	
		 // json validate
			String jsonString = prev.getResponseDataAsString();
			JsonObject response = JsonObject.readFrom(jsonString);
	          JsonObject responseObject = response.get(&quot;responseObject&quot;).asObject();
			JsonArray responseList = responseObject.get(&quot;responseList&quot;).asArray();
	          JsonNumber userId = responseList.get(0).asObject().get(&quot;userId&quot;);
	          JsonNumber customerId = responseList.get(0).asObject().get(&quot;customerId&quot;);		
			String name = responseList.get(0).asObject().get(&quot;name&quot;).asString();
			String email = responseList.get(0).asObject().get(&quot;email&quot;).asString();
			String providerSrc = responseList.get(0).asObject().get(&quot;providerSrc&quot;).asString(); 
			String userDesignation = responseList.get(0).asObject().get(&quot;userDesignation&quot;).asString(); 
			String jobDescription = responseList.get(0).asObject().get(&quot;jobDescription&quot;).asString(); 
			String status = responseList.get(0).asObject().get(&quot;status&quot;).asString(); 
			String timezone = responseList.get(0).asObject().get(&quot;timeZone&quot;).asString();
			String locale = responseList.get(0).asObject().get(&quot;locale&quot;).asString();
	          JsonObject reportingManager = responseList.get(0).asObject().get(&quot;reportingManager&quot;).asObject();
	          JsonNumber manageruserId = reportingManager.get(&quot;userId&quot;);
	          String maangername = reportingManager.get(&quot;name&quot;).asString();
	          
//	          String maangerdesignation = reportingManager.get(&quot;designation&quot;).asString();
//	          String maangerjobDesc = reportingManager.get(&quot;jobDesc&quot;).asString();
	          
	          String maangertimezone = reportingManager.get(&quot;timezone&quot;).asString();
	          String maangeruserLocale = reportingManager.get(&quot;userLocale&quot;).asString();
	          String maangeremail = reportingManager.get(&quot;email&quot;).asString();
	          JsonArray userRole = responseList.get(0).asObject().get(&quot;userRole&quot;).asArray();
	          JsonNumber userroleId = userRole.get(0).asObject().get(&quot;id&quot;);
	          String rolename = userRole.get(0).asObject().get(&quot;roleName&quot;).asString();
	          JsonArray userTeam = responseList.get(0).asObject().get(&quot;userTeam&quot;).asArray();
	          JsonNumber customerId = userTeam.get(0).asObject().get(&quot;customerId&quot;);
	          JsonNumber teamId = userTeam.get(0).asObject().get(&quot;teamId&quot;);
	          String teamName = userTeam.get(0).asObject().get(&quot;teamName&quot;).asString();
	          
	        //atrributes
			if(name != null) {
			   nameStr = name.toString();
			   if(nameStr != null @and nameStr.length() &gt; 0) {
			 	log.info(&quot;search by team : name property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by team : name property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(userId != null) {
			   userIdStr = userId.toString();
			   if(userIdStr != null @and userIdStr.length() &gt; 0) {
			 	log.info(&quot;search by team : userId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by team : userId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}				        
			if(customerId != null) {
			   customerIdStr = customerId.toString();
			   if(customerIdStr != null @and customerIdStr.length() &gt; 0) {
			 	log.info(&quot;search by team : customerId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by team : customerId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}	
			if(name != null) {
			   nameStr = name.toString();
			   if(nameStr != null @and nameStr.length() &gt; 0) {
			 	log.info(&quot;search by team : name property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by team : name property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}	
			if(email != null) {
			   emailStr = email.toString();
			   if(emailStr != null @and emailStr.length() &gt; 0) {
			 	log.info(&quot;search by team : email property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by team : email property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(providerSrc != null) {
			   providerSrcStr = providerSrc.toString();
			   if(providerSrcStr != null @and providerSrcStr.length() &gt; 0) {
			 	log.info(&quot;search by team : providerSrc property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by team : providerSrc property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(userDesignation != null) {
			   userDesignationStr = userDesignation.toString();
			   if(userDesignationStr != null @and userDesignationStr.length() &gt; 0) {
			 	log.info(&quot;search by team : userDesignation property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by team : userDesignation property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(jobDescription != null) {
			   jobDescriptionStr = jobDescription.toString();
			   if(jobDescriptionStr != null @and jobDescriptionStr.length() &gt; 0) {
			 	log.info(&quot;search by team : jobDescription property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by team : jobDescription property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(status != null) {
			   statusStr = status.toString();
			   if(statusStr != null @and statusStr.length() &gt; 0) {
			 	log.info(&quot;search by team : status property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by team : status property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(timezone != null) {
			   timezoneStr = timezone.toString();
			   if(timezoneStr != null @and timezoneStr.length() &gt; 0) {
			 	log.info(&quot;search by team : timezone property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by team : timezone property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(locale != null) {
			   localeStr = locale.toString();
			   if(localeStr != null @and localeStr.length() &gt; 0) {
			 	log.info(&quot;search by team : locale property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by team : locale property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}			
			if(manageruserId != null) {
			   manageruserIdStr = manageruserId.toString();
			   if(manageruserIdStr != null @and manageruserIdStr.length() &gt; 0) {
			 	log.info(&quot;search by team : manageruserId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by team : manageruserId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}	
			if(maangername != null) {
			   maangernameStr = maangername.toString();
			   if(maangernameStr != null @and maangernameStr.length() &gt; 0) {
			 	log.info(&quot;search by team : maangername property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by team : maangername property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			
//			if(maangerdesignation != null) {
//			   maangerdesignationStr = maangerdesignation.toString();
//			   if(maangerdesignationStr != null @and maangerdesignationStr.length() &gt; 0) {
//			 	log.info(&quot;search by team : maangerdesignation property : success&quot;);
//			 	System.out.println(&quot;search by team : maangerdesignation property : success&quot;);
//			 	prev.setSuccessful(true); 
//			   } else{
//				 	log.info(&quot;search by team : maangerdesignation property : fail&quot;);
//				 	System.out.println(&quot;search by team : maangerdesignation property : fail&quot;);
//				 	prev.setSuccessful(false); 		   	
//			   }
//			}
//			if(maangerjobDesc != null) {
//			   maangerjobDescStr = maangerjobDesc.toString();
//			   if(maangerjobDescStr != null @and maangerjobDescStr.length() &gt; 0) {
//			 	log.info(&quot;search by team : maangerjobDesc property : success&quot;);
//			 	System.out.println(&quot;search by team : maangerjobDesc property : success&quot;);
//			 	prev.setSuccessful(true); 
//			   } else{
//				 	log.info(&quot;search by team : maangerjobDesc property : fail&quot;);
//				 	System.out.println(&quot;search by team : maangerjobDesc property : fail&quot;);
//				 	prev.setSuccessful(false); 		   	
//			   }
//			}

			if(maangertimezone != null) {
			   maangertimezoneStr = maangertimezone.toString();
			   if(maangertimezoneStr != null @and maangertimezoneStr.length() &gt; 0) {
			 	log.info(&quot;search by team : maangertimezone property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by team : maangertimezone property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(maangeruserLocale != null) {
			   maangeruserLocaleStr = maangeruserLocale.toString();
			   if(maangeruserLocaleStr != null @and maangeruserLocaleStr.length() &gt; 0) {
			 	log.info(&quot;search by team : maangeruserLocale property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by team : maangeruserLocale property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}	
			if(maangeremail != null) {
			   maangeremailStr = maangeremail.toString();
			   if(maangeremailStr != null @and maangeremailStr.length() &gt; 0) {
			 	log.info(&quot;search by team : maangeremail property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by team : maangeremail property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(userroleId != null) {
			   userroleIdStr = userroleId.toString();
			   if(userroleIdStr != null @and userroleIdStr.length() &gt; 0) {
			 	log.info(&quot;search by team : userroleId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by team : userroleId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(rolename != null) {
			   rolenameStr = rolename.toString();
			   if(rolenameStr != null @and rolenameStr.length() &gt; 0) {
			 	log.info(&quot;search by team : rolename property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by team : rolename property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(customerId != null) {
			   customerIdStr = customerId.toString();
			   if(customerIdStr != null @and customerIdStr.length() &gt; 0) {
			 	log.info(&quot;search by team : customerId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by team : customerId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(teamId != null) {
			   teamIdStr = teamId.toString();
			   if(teamIdStr != null @and teamIdStr.length() &gt; 0) {
			 	log.info(&quot;search by team : teamId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by team : teamId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(teamName != null) {
			   teamNameStr = teamName.toString();
			   if(teamNameStr != null @and teamNameStr.length() &gt; 0) {
			 	log.info(&quot;search by team : teamName property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by team : teamName property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
	 } else if( (status == &quot;&quot; ) || (status == null )){
	  	log.info(&quot;search by team : onboarding_employee_list api fail&quot;);
	 	prev.setSuccessful(false); 	
	 } else{
	 	log.info(&quot;search by team : onboarding_employee_list api fail&quot;);
	 	prev.setSuccessful(false); 
	 } 		
} catch(Exception e){
	log.info(&quot;beanshell Exception &quot;+e.getMessage());
     prev.setSuccessful(false);
} catch (FileNotFoundException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
} catch (IOException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
} catch (ParseException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-search/manager" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;userSearchAttribute&quot;:{&quot;prefix&quot;:&quot;USER_REPORTING_STRUCTURE_V3&quot;,&quot;type&quot;:&quot;core&quot;,&quot;key&quot;:&quot;REPORTING_MANAGER_ID&quot;},&quot;query&quot;:&quot;2&quot;}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/user/search?page=0&amp;size=20&amp;sort=USER_PROFILE_V3_NAME,asc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/people/list</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
            <stringProp name="VAR">onboarding_employee_list</stringProp>
            <stringProp name="JSONPATH">$.status.code</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import com.eclipsesource.json.*;

try{
	// check api success
	 String status=vars.get(&quot;onboarding_employee_list&quot;);
	 if(status.equals(&quot;1000&quot;)){
	 	log.info(&quot;search by manager onboarding_employee_list api success&quot;);
	 	//System.out.println(&quot;search by manager onboarding_employee_list api success&quot;);
	 	prev.setSuccessful(true); 
	
		 // json validate
			String jsonString = prev.getResponseDataAsString();
			JsonObject response = JsonObject.readFrom(jsonString);
	          JsonObject responseObject = response.get(&quot;responseObject&quot;).asObject();
			JsonArray responseList = responseObject.get(&quot;responseList&quot;).asArray();
	          JsonNumber userId = responseList.get(0).asObject().get(&quot;userId&quot;);
	          JsonNumber customerId = responseList.get(0).asObject().get(&quot;customerId&quot;);		
			String name = responseList.get(0).asObject().get(&quot;name&quot;).asString();
			String email = responseList.get(0).asObject().get(&quot;email&quot;).asString();
			String providerSrc = responseList.get(0).asObject().get(&quot;providerSrc&quot;).asString(); 
			//String userDesignation = responseList.get(0).asObject().get(&quot;userDesignation&quot;).asString(); 
			String jobDescription = responseList.get(0).asObject().get(&quot;jobDescription&quot;).asString(); 
			String status = responseList.get(0).asObject().get(&quot;status&quot;).asString(); 
			String timezone = responseList.get(0).asObject().get(&quot;timeZone&quot;).asString();
			String locale = responseList.get(0).asObject().get(&quot;locale&quot;).asString();
	          JsonObject reportingManager = responseList.get(0).asObject().get(&quot;reportingManager&quot;).asObject();
	          JsonNumber manageruserId = reportingManager.get(&quot;userId&quot;);
	          String maangername = reportingManager.get(&quot;name&quot;).asString();
	          
//	          String maangerdesignation = reportingManager.get(&quot;designation&quot;).asString();
//	          String maangerjobDesc = reportingManager.get(&quot;jobDesc&quot;).asString();
	          
	          String maangertimezone = reportingManager.get(&quot;timezone&quot;).asString();
	          String maangeruserLocale = reportingManager.get(&quot;userLocale&quot;).asString();
	          String maangeremail = reportingManager.get(&quot;email&quot;).asString();
	          JsonArray userRole = responseList.get(0).asObject().get(&quot;userRole&quot;).asArray();
	          JsonNumber userroleId = userRole.get(0).asObject().get(&quot;id&quot;);
	          String rolename = userRole.get(0).asObject().get(&quot;roleName&quot;).asString();
	          JsonArray userTeam = responseList.get(0).asObject().get(&quot;userTeam&quot;).asArray();
	          JsonNumber customerId = userTeam.get(0).asObject().get(&quot;customerId&quot;);
	          JsonNumber teamId = userTeam.get(0).asObject().get(&quot;teamId&quot;);
	          //String teamName = userTeam.get(0).asObject().get(&quot;teamName&quot;).asString();
	          
	        //atrributes
			if(name != null) {
			   nameStr = name.toString();
			   if(nameStr != null @and nameStr.length() &gt; 0) {
			 	log.info(&quot;search by manager : name property : success&quot;);
			 	//System.out.println(&quot;search by manager : name property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by manager : name property : fail&quot;);
				 	//System.out.println(&quot;search by manager : name property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(userId != null) {
			   userIdStr = userId.toString();
			   if(userIdStr != null @and userIdStr.length() &gt; 0) {
			 	log.info(&quot;search by manager : userId property : success&quot;);
			 	//System.out.println(&quot;search by manager : userId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by manager : userId property : fail&quot;);
				 	//System.out.println(&quot;search by manager : userId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}				        
			if(customerId != null) {
			   customerIdStr = customerId.toString();
			   if(customerIdStr != null @and customerIdStr.length() &gt; 0) {
			 	log.info(&quot;search by manager : customerId property : success&quot;);
			 	//System.out.println(&quot;search by manager : customerId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by manager : customerId property : fail&quot;);
				 	//System.out.println(&quot;search by manager : customerId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}	
			if(name != null) {
			   nameStr = name.toString();
			   if(nameStr != null @and nameStr.length() &gt; 0) {
			 	log.info(&quot;search by manager : name property : success&quot;);
			 	//System.out.println(&quot;search by manager : name property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by manager : name property : fail&quot;);
				 	//System.out.println(&quot;search by manager : name property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}	
			if(email != null) {
			   emailStr = email.toString();
			   if(emailStr != null @and emailStr.length() &gt; 0) {
			 	log.info(&quot;search by manager : email property : success&quot;);
			 	//System.out.println(&quot;search by manager : email property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by manager : email property : fail&quot;);
				 	//System.out.println(&quot;search by manager : email property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(providerSrc != null) {
			   providerSrcStr = providerSrc.toString();
			   if(providerSrcStr != null @and providerSrcStr.length() &gt; 0) {
			 	log.info(&quot;search by manager : providerSrc property : success&quot;);
			 	//System.out.println(&quot;search by manager : providerSrc property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by manager : providerSrc property : fail&quot;);
				 	//System.out.println(&quot;search by manager : providerSrc property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
//			if(userDesignation != null) {
//			   userDesignationStr = userDesignation.toString();
//			   if(userDesignationStr != null @and userDesignationStr.length() &gt; 0) {
//			 	log.info(&quot;search by manager : userDesignation property : success&quot;);
//			 	//System.out.println(&quot;search by manager : userDesignation property : success&quot;);
//			 	prev.setSuccessful(true); 
//			   } else{
//				 	log.info(&quot;search by manager : userDesignation property : fail&quot;);
//				 	//System.out.println(&quot;search by manager : userDesignation property : fail&quot;);
//				 	prev.setSuccessful(false); 		   	
//			   }
//			}
			if(jobDescription != null) {
			   jobDescriptionStr = jobDescription.toString();
			   if(jobDescriptionStr != null @and jobDescriptionStr.length() &gt; 0) {
			 	log.info(&quot;search by manager : jobDescription property : success&quot;);
			 	//System.out.println(&quot;search by manager : jobDescription property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by manager : jobDescription property : fail&quot;);
				 	//System.out.println(&quot;search by manager : jobDescription property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(status != null) {
			   statusStr = status.toString();
			   if(statusStr != null @and statusStr.length() &gt; 0) {
			 	log.info(&quot;search by manager : status property : success&quot;);
			 	//System.out.println(&quot;search by manager : status property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by manager : status property : fail&quot;);
				 	//System.out.println(&quot;search by manager : status property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(timezone != null) {
			   timezoneStr = timezone.toString();
			   if(timezoneStr != null @and timezoneStr.length() &gt; 0) {
			 	log.info(&quot;search by manager : timezone property : success&quot;);
			 	//System.out.println(&quot;search by manager : timezone property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by manager : timezone property : fail&quot;);
				 	//System.out.println(&quot;search by manager : timezone property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(locale != null) {
			   localeStr = locale.toString();
			   if(localeStr != null @and localeStr.length() &gt; 0) {
			 	log.info(&quot;search by manager : locale property : success&quot;);
			 	//System.out.println(&quot;search by manager : locale property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by manager : locale property : fail&quot;);
				 	//System.out.println(&quot;search by manager : locale property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}			
			if(manageruserId != null) {
			   manageruserIdStr = manageruserId.toString();
			   if(manageruserIdStr != null @and manageruserIdStr.length() &gt; 0) {
			 	log.info(&quot;search by manager : manageruserId property : success&quot;);
			 	//System.out.println(&quot;search by manager : manageruserId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by manager : manageruserId property : fail&quot;);
				 	//System.out.println(&quot;search by manager : manageruserId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}	
			if(maangername != null) {
			   maangernameStr = maangername.toString();
			   if(maangernameStr != null @and maangernameStr.length() &gt; 0) {
			 	log.info(&quot;search by manager : maangername property : success&quot;);
			 	//System.out.println(&quot;search by manager : maangername property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by manager : maangername property : fail&quot;);
				 	//System.out.println(&quot;search by manager : maangername property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			
//			if(maangerdesignation != null) {
//			   maangerdesignationStr = maangerdesignation.toString();
//			   if(maangerdesignationStr != null @and maangerdesignationStr.length() &gt; 0) {
//			 	log.info(&quot;search by manager : maangerdesignation property : success&quot;);
//			 	//System.out.println(&quot;search by manager : maangerdesignation property : success&quot;);
//			 	prev.setSuccessful(true); 
//			   } else{
//				 	log.info(&quot;search by manager : maangerdesignation property : fail&quot;);
//				 	//System.out.println(&quot;search by manager : maangerdesignation property : fail&quot;);
//				 	prev.setSuccessful(false); 		   	
//			   }
//			}
//			if(maangerjobDesc != null) {
//			   maangerjobDescStr = maangerjobDesc.toString();
//			   if(maangerjobDescStr != null @and maangerjobDescStr.length() &gt; 0) {
//			 	log.info(&quot;search by manager : maangerjobDesc property : success&quot;);
//			 	//System.out.println(&quot;search by manager : maangerjobDesc property : success&quot;);
//			 	prev.setSuccessful(true); 
//			   } else{
//				 	log.info(&quot;search by manager : maangerjobDesc property : fail&quot;);
//				 	//System.out.println(&quot;search by manager : maangerjobDesc property : fail&quot;);
//				 	prev.setSuccessful(false); 		   	
//			   }
//			}

			if(maangertimezone != null) {
			   maangertimezoneStr = maangertimezone.toString();
			   if(maangertimezoneStr != null @and maangertimezoneStr.length() &gt; 0) {
			 	log.info(&quot;search by manager : maangertimezone property : success&quot;);
			 	//System.out.println(&quot;search by manager : maangertimezone property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by manager : maangertimezone property : fail&quot;);
				 	//System.out.println(&quot;search by manager : maangertimezone property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(maangeruserLocale != null) {
			   maangeruserLocaleStr = maangeruserLocale.toString();
			   if(maangeruserLocaleStr != null @and maangeruserLocaleStr.length() &gt; 0) {
			 	log.info(&quot;search by manager : maangeruserLocale property : success&quot;);
			 	//System.out.println(&quot;search by manager : maangeruserLocale property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by manager : maangeruserLocale property : fail&quot;);
				 	//System.out.println(&quot;search by manager : maangeruserLocale property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}	
			if(maangeremail != null) {
			   maangeremailStr = maangeremail.toString();
			   if(maangeremailStr != null @and maangeremailStr.length() &gt; 0) {
			 	log.info(&quot;search by manager : maangeremail property : success&quot;);
			 	//System.out.println(&quot;search by manager : maangeremail property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by manager : maangeremail property : fail&quot;);
				 	//System.out.println(&quot;search by manager : maangeremail property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(userroleId != null) {
			   userroleIdStr = userroleId.toString();
			   if(userroleIdStr != null @and userroleIdStr.length() &gt; 0) {
			 	log.info(&quot;search by manager : userroleId property : success&quot;);
			 	//System.out.println(&quot;search by manager : userroleId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by manager : userroleId property : fail&quot;);
				 	//System.out.println(&quot;search by manager : userroleId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(rolename != null) {
			   rolenameStr = rolename.toString();
			   if(rolenameStr != null @and rolenameStr.length() &gt; 0) {
			 	log.info(&quot;search by manager : rolename property : success&quot;);
			 	//System.out.println(&quot;search by manager : rolename property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by manager : rolename property : fail&quot;);
				 	//System.out.println(&quot;search by manager : rolename property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(customerId != null) {
			   customerIdStr = customerId.toString();
			   if(customerIdStr != null @and customerIdStr.length() &gt; 0) {
			 	log.info(&quot;search by manager : customerId property : success&quot;);
			 	//System.out.println(&quot;search by manager : customerId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by manager : customerId property : fail&quot;);
				 	//System.out.println(&quot;search by manager : customerId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(teamId != null) {
			   teamIdStr = teamId.toString();
			   if(teamIdStr != null @and teamIdStr.length() &gt; 0) {
			 	log.info(&quot;search by manager : teamId property : success&quot;);
			 	//System.out.println(&quot;search by manager : teamId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by manager : teamId property : fail&quot;);
				 	//System.out.println(&quot;search by manager : teamId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
//			if(teamName != null) {
//			   teamNameStr = teamName.toString();
//			   if(teamNameStr != null @and teamNameStr.length() &gt; 0) {
//			 	log.info(&quot;search by manager : teamName property : success&quot;);
//			 	//System.out.println(&quot;search by manager : teamName property : success&quot;);
//			 	prev.setSuccessful(true); 
//			   } else{
//				 	log.info(&quot;search by manager : teamName property : fail&quot;);
//				 	//System.out.println(&quot;search by manager : teamName property : fail&quot;);
//				 	prev.setSuccessful(false); 		   	
//			   }
//			}
              //System.out.println(&quot;--------------------------------------------------------&quot;);
              //System.out.println(&quot;search by designation&quot;);
              //System.out.println(&quot;--------------------------------------------------------&quot;);
	 } else if( (status == &quot;&quot; ) || (status == null )){
	  	log.info(&quot;search by manager : onboarding_employee_list api fail&quot;);
	 	//System.out.println(&quot;search by manager : onboarding_employee_list api fail&quot;);
	 	prev.setSuccessful(false); 	
	 } else{
	 	log.info(&quot;search by manager : onboarding_employee_list api fail&quot;);
	 	//System.out.println(&quot;search by manager : onboarding_employee_list api  fail&quot;);
	 	prev.setSuccessful(false); 
	 } 		
} catch(Exception e){
	log.info(&quot;beanshell Exception &quot;+e.getMessage());
     prev.setSuccessful(false);
} catch (FileNotFoundException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
} catch (IOException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
} catch (ParseException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-search/designation" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;userSearchAttribute&quot;:{&quot;prefix&quot;:&quot;USER_PROFILE_V3&quot;,&quot;type&quot;:&quot;core&quot;,&quot;key&quot;:&quot;DESIGNATION&quot;},&quot;query&quot;:&quot;Manager&quot;}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/user/search?page=0&amp;size=20&amp;sort=USER_PROFILE_V3_NAME,asc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/people/list</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
            <stringProp name="VAR">onboarding_employee_list</stringProp>
            <stringProp name="JSONPATH">$.status.code</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import com.eclipsesource.json.*;

try{
	// check api success
	 String status=vars.get(&quot;onboarding_employee_list&quot;);
	 if(status.equals(&quot;1000&quot;)){
	 	log.info(&quot;search by designation onboarding_employee_list api success&quot;);
	 	//System.out.println(&quot;search by designation onboarding_employee_list api success&quot;);
	 	prev.setSuccessful(true); 
	
		 // json validate
			String jsonString = prev.getResponseDataAsString();
			JsonObject response = JsonObject.readFrom(jsonString);
	          JsonObject responseObject = response.get(&quot;responseObject&quot;).asObject();
			JsonArray responseList = responseObject.get(&quot;responseList&quot;).asArray();
	          JsonNumber userId = responseList.get(0).asObject().get(&quot;userId&quot;);
	          JsonNumber customerId = responseList.get(0).asObject().get(&quot;customerId&quot;);		
			String name = responseList.get(0).asObject().get(&quot;name&quot;).asString();
			String email = responseList.get(0).asObject().get(&quot;email&quot;).asString();
			String providerSrc = responseList.get(0).asObject().get(&quot;providerSrc&quot;).asString(); 
			String userDesignation = responseList.get(0).asObject().get(&quot;userDesignation&quot;).asString(); 
			String jobDescription = responseList.get(0).asObject().get(&quot;jobDescription&quot;).asString(); 
			String status = responseList.get(0).asObject().get(&quot;status&quot;).asString(); 
			String timezone = responseList.get(0).asObject().get(&quot;timeZone&quot;).asString();
			String locale = responseList.get(0).asObject().get(&quot;locale&quot;).asString();
//	          JsonObject reportingManager = responseList.get(0).asObject().get(&quot;reportingManager&quot;).asObject();
//	          JsonNumber manageruserId = reportingManager.get(&quot;userId&quot;);
//	          String maangername = reportingManager.get(&quot;name&quot;).asString();
//	          
//	          String maangerdesignation = reportingManager.get(&quot;designation&quot;).asString();
//	          String maangerjobDesc = reportingManager.get(&quot;jobDesc&quot;).asString();
//	          
//	          String maangertimezone = reportingManager.get(&quot;timezone&quot;).asString();
//	          String maangeruserLocale = reportingManager.get(&quot;userLocale&quot;).asString();
//	          String maangeremail = reportingManager.get(&quot;email&quot;).asString();
	          JsonArray userRole = responseList.get(0).asObject().get(&quot;userRole&quot;).asArray();
	          JsonNumber userroleId = userRole.get(0).asObject().get(&quot;id&quot;);
	          String rolename = userRole.get(0).asObject().get(&quot;roleName&quot;).asString();
	          JsonArray userTeam = responseList.get(0).asObject().get(&quot;userTeam&quot;).asArray();
	          JsonNumber customerId = userTeam.get(0).asObject().get(&quot;customerId&quot;);
	          JsonNumber teamId = userTeam.get(0).asObject().get(&quot;teamId&quot;);
	          String teamName = userTeam.get(0).asObject().get(&quot;teamName&quot;).asString();
	          
	        //atrributes
			if(name != null) {
			   nameStr = name.toString();
			   if(nameStr != null @and nameStr.length() &gt; 0) {
			 	log.info(&quot;search by designation : name property : success&quot;);
			 	//System.out.println(&quot;search by designation : name property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by designation : name property : fail&quot;);
				 	//System.out.println(&quot;search by designation : name property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(userId != null) {
			   userIdStr = userId.toString();
			   if(userIdStr != null @and userIdStr.length() &gt; 0) {
			 	log.info(&quot;search by designation : userId property : success&quot;);
			 	//System.out.println(&quot;search by designation : userId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by designation : userId property : fail&quot;);
				 	//System.out.println(&quot;search by designation : userId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}				        
			if(customerId != null) {
			   customerIdStr = customerId.toString();
			   if(customerIdStr != null @and customerIdStr.length() &gt; 0) {
			 	log.info(&quot;search by designation : customerId property : success&quot;);
			 	//System.out.println(&quot;search by designation : customerId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by designation : customerId property : fail&quot;);
				 	//System.out.println(&quot;search by designation : customerId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}	
			if(name != null) {
			   nameStr = name.toString();
			   if(nameStr != null @and nameStr.length() &gt; 0) {
			 	log.info(&quot;search by designation : name property : success&quot;);
			 	//System.out.println(&quot;search by designation : name property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by designation : name property : fail&quot;);
				 	//System.out.println(&quot;search by designation : name property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}	
			if(email != null) {
			   emailStr = email.toString();
			   if(emailStr != null @and emailStr.length() &gt; 0) {
			 	log.info(&quot;search by designation : email property : success&quot;);
			 	//System.out.println(&quot;search by designation : email property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by designation : email property : fail&quot;);
				 	//System.out.println(&quot;search by designation : email property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(providerSrc != null) {
			   providerSrcStr = providerSrc.toString();
			   if(providerSrcStr != null @and providerSrcStr.length() &gt; 0) {
			 	log.info(&quot;search by designation : providerSrc property : success&quot;);
			 	//System.out.println(&quot;search by designation : providerSrc property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by designation : providerSrc property : fail&quot;);
				 	//System.out.println(&quot;search by designation : providerSrc property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(userDesignation != null) {
			   userDesignationStr = userDesignation.toString();
			   if(userDesignationStr != null @and userDesignationStr.length() &gt; 0) {
			 	log.info(&quot;search by designation : userDesignation property : success&quot;);
			 	//System.out.println(&quot;search by designation : userDesignation property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by designation : userDesignation property : fail&quot;);
				 	//System.out.println(&quot;search by designation : userDesignation property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(jobDescription != null) {
			   jobDescriptionStr = jobDescription.toString();
			   if(jobDescriptionStr != null @and jobDescriptionStr.length() &gt; 0) {
			 	log.info(&quot;search by designation : jobDescription property : success&quot;);
			 	//System.out.println(&quot;search by designation : jobDescription property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by designation : jobDescription property : fail&quot;);
				 	//System.out.println(&quot;search by designation : jobDescription property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(status != null) {
			   statusStr = status.toString();
			   if(statusStr != null @and statusStr.length() &gt; 0) {
			 	log.info(&quot;search by designation : status property : success&quot;);
			 	//System.out.println(&quot;search by designation : status property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by designation : status property : fail&quot;);
				 	//System.out.println(&quot;search by designation : status property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(timezone != null) {
			   timezoneStr = timezone.toString();
			   if(timezoneStr != null @and timezoneStr.length() &gt; 0) {
			 	log.info(&quot;search by designation : timezone property : success&quot;);
			 	//System.out.println(&quot;search by designation : timezone property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by designation : timezone property : fail&quot;);
				 	//System.out.println(&quot;search by designation : timezone property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(locale != null) {
			   localeStr = locale.toString();
			   if(localeStr != null @and localeStr.length() &gt; 0) {
			 	log.info(&quot;search by designation : locale property : success&quot;);
			 	//System.out.println(&quot;search by designation : locale property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by designation : locale property : fail&quot;);
				 	//System.out.println(&quot;search by designation : locale property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}			
//			if(manageruserId != null) {
//			   manageruserIdStr = manageruserId.toString();
//			   if(manageruserIdStr != null @and manageruserIdStr.length() &gt; 0) {
//			 	log.info(&quot;search by designation : manageruserId property : success&quot;);
//			 	//System.out.println(&quot;search by designation : manageruserId property : success&quot;);
//			 	prev.setSuccessful(true); 
//			   } else{
//				 	log.info(&quot;search by designation : manageruserId property : fail&quot;);
//				 	//System.out.println(&quot;search by designation : manageruserId property : fail&quot;);
//				 	prev.setSuccessful(false); 		   	
//			   }
//			}	
//			if(maangername != null) {
//			   maangernameStr = maangername.toString();
//			   if(maangernameStr != null @and maangernameStr.length() &gt; 0) {
//			 	log.info(&quot;search by designation : maangername property : success&quot;);
//			 	//System.out.println(&quot;search by designation : maangername property : success&quot;);
//			 	prev.setSuccessful(true); 
//			   } else{
//				 	log.info(&quot;search by designation : maangername property : fail&quot;);
//				 	//System.out.println(&quot;search by designation : maangername property : fail&quot;);
//				 	prev.setSuccessful(false); 		   	
//			   }
//			}
//			
//			if(maangerdesignation != null) {
//			   maangerdesignationStr = maangerdesignation.toString();
//			   if(maangerdesignationStr != null @and maangerdesignationStr.length() &gt; 0) {
//			 	log.info(&quot;search by designation : maangerdesignation property : success&quot;);
//			 	//System.out.println(&quot;search by designation : maangerdesignation property : success&quot;);
//			 	prev.setSuccessful(true); 
//			   } else{
//				 	log.info(&quot;search by designation : maangerdesignation property : fail&quot;);
//				 	//System.out.println(&quot;search by designation : maangerdesignation property : fail&quot;);
//				 	prev.setSuccessful(false); 		   	
//			   }
//			}
//			if(maangerjobDesc != null) {
//			   maangerjobDescStr = maangerjobDesc.toString();
//			   if(maangerjobDescStr != null @and maangerjobDescStr.length() &gt; 0) {
//			 	log.info(&quot;search by designation : maangerjobDesc property : success&quot;);
//			 	//System.out.println(&quot;search by designation : maangerjobDesc property : success&quot;);
//			 	prev.setSuccessful(true); 
//			   } else{
//				 	log.info(&quot;search by designation : maangerjobDesc property : fail&quot;);
//				 	//System.out.println(&quot;search by designation : maangerjobDesc property : fail&quot;);
//				 	prev.setSuccessful(false); 		   	
//			   }
//			}
//
//			if(maangertimezone != null) {
//			   maangertimezoneStr = maangertimezone.toString();
//			   if(maangertimezoneStr != null @and maangertimezoneStr.length() &gt; 0) {
//			 	log.info(&quot;search by designation : maangertimezone property : success&quot;);
//			 	//System.out.println(&quot;search by designation : maangertimezone property : success&quot;);
//			 	prev.setSuccessful(true); 
//			   } else{
//				 	log.info(&quot;search by designation : maangertimezone property : fail&quot;);
//				 	//System.out.println(&quot;search by designation : maangertimezone property : fail&quot;);
//				 	prev.setSuccessful(false); 		   	
//			   }
//			}
//			if(maangeruserLocale != null) {
//			   maangeruserLocaleStr = maangeruserLocale.toString();
//			   if(maangeruserLocaleStr != null @and maangeruserLocaleStr.length() &gt; 0) {
//			 	log.info(&quot;search by designation : maangeruserLocale property : success&quot;);
//			 	//System.out.println(&quot;search by designation : maangeruserLocale property : success&quot;);
//			 	prev.setSuccessful(true); 
//			   } else{
//				 	log.info(&quot;search by designation : maangeruserLocale property : fail&quot;);
//				 	//System.out.println(&quot;search by designation : maangeruserLocale property : fail&quot;);
//				 	prev.setSuccessful(false); 		   	
//			   }
//			}	
//			if(maangeremail != null) {
//			   maangeremailStr = maangeremail.toString();
//			   if(maangeremailStr != null @and maangeremailStr.length() &gt; 0) {
//			 	log.info(&quot;search by designation : maangeremail property : success&quot;);
//			 	//System.out.println(&quot;search by designation : maangeremail property : success&quot;);
//			 	prev.setSuccessful(true); 
//			   } else{
//				 	log.info(&quot;search by designation : maangeremail property : fail&quot;);
//				 	//System.out.println(&quot;search by designation : maangeremail property : fail&quot;);
//				 	prev.setSuccessful(false); 		   	
//			   }
//			}
			if(userroleId != null) {
			   userroleIdStr = userroleId.toString();
			   if(userroleIdStr != null @and userroleIdStr.length() &gt; 0) {
			 	log.info(&quot;search by designation : userroleId property : success&quot;);
			 	//System.out.println(&quot;search by designation : userroleId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by designation : userroleId property : fail&quot;);
				 	//System.out.println(&quot;search by designation : userroleId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(rolename != null) {
			   rolenameStr = rolename.toString();
			   if(rolenameStr != null @and rolenameStr.length() &gt; 0) {
			 	log.info(&quot;search by designation : rolename property : success&quot;);
			 	//System.out.println(&quot;search by designation : rolename property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by designation : rolename property : fail&quot;);
				 	//System.out.println(&quot;search by designation : rolename property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(customerId != null) {
			   customerIdStr = customerId.toString();
			   if(customerIdStr != null @and customerIdStr.length() &gt; 0) {
			 	log.info(&quot;search by designation : customerId property : success&quot;);
			 	//System.out.println(&quot;search by designation : customerId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by designation : customerId property : fail&quot;);
				 	//System.out.println(&quot;search by designation : customerId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(teamId != null) {
			   teamIdStr = teamId.toString();
			   if(teamIdStr != null @and teamIdStr.length() &gt; 0) {
			 	log.info(&quot;search by designation : teamId property : success&quot;);
			 	//System.out.println(&quot;search by designation : teamId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by designation : teamId property : fail&quot;);
				 	//System.out.println(&quot;search by designation : teamId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(teamName != null) {
			   teamNameStr = teamName.toString();
			   if(teamNameStr != null @and teamNameStr.length() &gt; 0) {
			 	log.info(&quot;search by designation : teamName property : success&quot;);
			 	//System.out.println(&quot;search by designation : teamName property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by designation : teamName property : fail&quot;);
				 	//System.out.println(&quot;search by designation : teamName property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
              //System.out.println(&quot;--------------------------------------------------------&quot;);
              //System.out.println(&quot;search by job function&quot;);
              //System.out.println(&quot;--------------------------------------------------------&quot;);
	 } else if( (status == &quot;&quot; ) || (status == null )){
	  	log.info(&quot;search by designation : onboarding_employee_list api fail&quot;);
	 	//System.out.println(&quot;search by designation : onboarding_employee_list api fail&quot;);
	 	prev.setSuccessful(false); 	
	 } else{
	 	log.info(&quot;search by designation : onboarding_employee_list api fail&quot;);
	 	//System.out.println(&quot;search by designation : onboarding_employee_list api  fail&quot;);
	 	prev.setSuccessful(false); 
	 } 		
} catch(Exception e){
	log.info(&quot;beanshell Exception &quot;+e.getMessage());
     prev.setSuccessful(false);
} catch (FileNotFoundException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
} catch (IOException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
} catch (ParseException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-search/job-role" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&quot;userSearchAttribute&quot;:{&quot;prefix&quot;:&quot;USER_PROFILE_V3&quot;,&quot;type&quot;:&quot;core&quot;,&quot;key&quot;:&quot;JOB_DESC&quot;},&quot;query&quot;:&quot;Engineer&quot;}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/user/search?page=0&amp;size=20&amp;sort=USER_PROFILE_V3_NAME,asc</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/people/list</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
            <stringProp name="VAR">onboarding_employee_list</stringProp>
            <stringProp name="JSONPATH">$.status.code</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import com.eclipsesource.json.*;

try{
	// check api success
	 String status=vars.get(&quot;onboarding_employee_list&quot;);
	 if(status.equals(&quot;1000&quot;)){
	 	log.info(&quot;search by job function onboarding_employee_list api success&quot;);
	 	//System.out.println(&quot;search by job function onboarding_employee_list api success&quot;);
	 	prev.setSuccessful(true); 
	
		 // json validate
			String jsonString = prev.getResponseDataAsString();
			JsonObject response = JsonObject.readFrom(jsonString);
	          JsonObject responseObject = response.get(&quot;responseObject&quot;).asObject();
			JsonArray responseList = responseObject.get(&quot;responseList&quot;).asArray();
	          JsonNumber userId = responseList.get(0).asObject().get(&quot;userId&quot;);
	          JsonNumber customerId = responseList.get(0).asObject().get(&quot;customerId&quot;);		
			String name = responseList.get(0).asObject().get(&quot;name&quot;).asString();
			String email = responseList.get(0).asObject().get(&quot;email&quot;).asString();
			String providerSrc = responseList.get(0).asObject().get(&quot;providerSrc&quot;).asString(); 
			String userDesignation = responseList.get(0).asObject().get(&quot;userDesignation&quot;).asString(); 
			String jobDescription = responseList.get(0).asObject().get(&quot;jobDescription&quot;).asString(); 
			String status = responseList.get(0).asObject().get(&quot;status&quot;).asString(); 
			String timezone = responseList.get(0).asObject().get(&quot;timeZone&quot;).asString();
			String locale = responseList.get(0).asObject().get(&quot;locale&quot;).asString();
	          JsonObject reportingManager = responseList.get(0).asObject().get(&quot;reportingManager&quot;).asObject();
	          JsonNumber manageruserId = reportingManager.get(&quot;userId&quot;);
	          String maangername = reportingManager.get(&quot;name&quot;).asString();
	          
	          String maangerdesignation = reportingManager.get(&quot;designation&quot;).asString();
	          String maangerjobDesc = reportingManager.get(&quot;jobDesc&quot;).asString();
	          
	          String maangertimezone = reportingManager.get(&quot;timezone&quot;).asString();
	          String maangeruserLocale = reportingManager.get(&quot;userLocale&quot;).asString();
	          String maangeremail = reportingManager.get(&quot;email&quot;).asString();
	          JsonArray userRole = responseList.get(0).asObject().get(&quot;userRole&quot;).asArray();
	          JsonNumber userroleId = userRole.get(0).asObject().get(&quot;id&quot;);
	          String rolename = userRole.get(0).asObject().get(&quot;roleName&quot;).asString();
	          JsonArray userTeam = responseList.get(0).asObject().get(&quot;userTeam&quot;).asArray();
	          JsonNumber customerId = userTeam.get(0).asObject().get(&quot;customerId&quot;);
	          JsonNumber teamId = userTeam.get(0).asObject().get(&quot;teamId&quot;);
	          String teamName = userTeam.get(0).asObject().get(&quot;teamName&quot;).asString();
	          
	        //atrributes
			if(name != null) {
			   nameStr = name.toString();
			   if(nameStr != null @and nameStr.length() &gt; 0) {
			 	log.info(&quot;search by job function : name property : success&quot;);
			 	//System.out.println(&quot;search by job function : name property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by job function : name property : fail&quot;);
				 	//System.out.println(&quot;search by job function : name property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(userId != null) {
			   userIdStr = userId.toString();
			   if(userIdStr != null @and userIdStr.length() &gt; 0) {
			 	log.info(&quot;search by job function : userId property : success&quot;);
			 	//System.out.println(&quot;search by job function : userId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by job function : userId property : fail&quot;);
				 	//System.out.println(&quot;search by job function : userId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}				        
			if(customerId != null) {
			   customerIdStr = customerId.toString();
			   if(customerIdStr != null @and customerIdStr.length() &gt; 0) {
			 	log.info(&quot;search by job function : customerId property : success&quot;);
			 	//System.out.println(&quot;search by job function : customerId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by job function : customerId property : fail&quot;);
				 	//System.out.println(&quot;search by job function : customerId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}	
			if(name != null) {
			   nameStr = name.toString();
			   if(nameStr != null @and nameStr.length() &gt; 0) {
			 	log.info(&quot;search by job function : name property : success&quot;);
			 	//System.out.println(&quot;search by job function : name property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by job function : name property : fail&quot;);
				 	//System.out.println(&quot;search by job function : name property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}	
			if(email != null) {
			   emailStr = email.toString();
			   if(emailStr != null @and emailStr.length() &gt; 0) {
			 	log.info(&quot;search by job function : email property : success&quot;);
			 	//System.out.println(&quot;search by job function : email property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by job function : email property : fail&quot;);
				 	//System.out.println(&quot;search by job function : email property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(providerSrc != null) {
			   providerSrcStr = providerSrc.toString();
			   if(providerSrcStr != null @and providerSrcStr.length() &gt; 0) {
			 	log.info(&quot;search by job function : providerSrc property : success&quot;);
			 	//System.out.println(&quot;search by job function : providerSrc property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by job function : providerSrc property : fail&quot;);
				 	//System.out.println(&quot;search by job function : providerSrc property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(userDesignation != null) {
			   userDesignationStr = userDesignation.toString();
			   if(userDesignationStr != null @and userDesignationStr.length() &gt; 0) {
			 	log.info(&quot;search by job function : userDesignation property : success&quot;);
			 	//System.out.println(&quot;search by job function : userDesignation property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by job function : userDesignation property : fail&quot;);
				 	//System.out.println(&quot;search by job function : userDesignation property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(jobDescription != null) {
			   jobDescriptionStr = jobDescription.toString();
			   if(jobDescriptionStr != null @and jobDescriptionStr.length() &gt; 0) {
			 	log.info(&quot;search by job function : jobDescription property : success&quot;);
			 	//System.out.println(&quot;search by job function : jobDescription property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by job function : jobDescription property : fail&quot;);
				 	//System.out.println(&quot;search by job function : jobDescription property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(status != null) {
			   statusStr = status.toString();
			   if(statusStr != null @and statusStr.length() &gt; 0) {
			 	log.info(&quot;search by job function : status property : success&quot;);
			 	//System.out.println(&quot;search by job function : status property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by job function : status property : fail&quot;);
				 	//System.out.println(&quot;search by job function : status property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(timezone != null) {
			   timezoneStr = timezone.toString();
			   if(timezoneStr != null @and timezoneStr.length() &gt; 0) {
			 	log.info(&quot;search by job function : timezone property : success&quot;);
			 	//System.out.println(&quot;search by job function : timezone property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by job function : timezone property : fail&quot;);
				 	//System.out.println(&quot;search by job function : timezone property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(locale != null) {
			   localeStr = locale.toString();
			   if(localeStr != null @and localeStr.length() &gt; 0) {
			 	log.info(&quot;search by job function : locale property : success&quot;);
			 	//System.out.println(&quot;search by job function : locale property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by job function : locale property : fail&quot;);
				 	//System.out.println(&quot;search by job function : locale property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}			
			if(manageruserId != null) {
			   manageruserIdStr = manageruserId.toString();
			   if(manageruserIdStr != null @and manageruserIdStr.length() &gt; 0) {
			 	log.info(&quot;search by job function : manageruserId property : success&quot;);
			 	//System.out.println(&quot;search by job function : manageruserId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by job function : manageruserId property : fail&quot;);
				 	//System.out.println(&quot;search by job function : manageruserId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}	
			if(maangername != null) {
			   maangernameStr = maangername.toString();
			   if(maangernameStr != null @and maangernameStr.length() &gt; 0) {
			 	log.info(&quot;search by job function : maangername property : success&quot;);
			 	//System.out.println(&quot;search by job function : maangername property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by job function : maangername property : fail&quot;);
				 	//System.out.println(&quot;search by job function : maangername property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			
			if(maangerdesignation != null) {
			   maangerdesignationStr = maangerdesignation.toString();
			   if(maangerdesignationStr != null @and maangerdesignationStr.length() &gt; 0) {
			 	log.info(&quot;search by job function : maangerdesignation property : success&quot;);
			 	//System.out.println(&quot;search by job function : maangerdesignation property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by job function : maangerdesignation property : fail&quot;);
				 	//System.out.println(&quot;search by job function : maangerdesignation property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(maangerjobDesc != null) {
			   maangerjobDescStr = maangerjobDesc.toString();
			   if(maangerjobDescStr != null @and maangerjobDescStr.length() &gt; 0) {
			 	log.info(&quot;search by job function : maangerjobDesc property : success&quot;);
			 	//System.out.println(&quot;search by job function : maangerjobDesc property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by job function : maangerjobDesc property : fail&quot;);
				 	//System.out.println(&quot;search by job function : maangerjobDesc property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}

			if(maangertimezone != null) {
			   maangertimezoneStr = maangertimezone.toString();
			   if(maangertimezoneStr != null @and maangertimezoneStr.length() &gt; 0) {
			 	log.info(&quot;search by job function : maangertimezone property : success&quot;);
			 	//System.out.println(&quot;search by job function : maangertimezone property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by job function : maangertimezone property : fail&quot;);
				 	//System.out.println(&quot;search by job function : maangertimezone property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(maangeruserLocale != null) {
			   maangeruserLocaleStr = maangeruserLocale.toString();
			   if(maangeruserLocaleStr != null @and maangeruserLocaleStr.length() &gt; 0) {
			 	log.info(&quot;search by job function : maangeruserLocale property : success&quot;);
			 	//System.out.println(&quot;search by job function : maangeruserLocale property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by job function : maangeruserLocale property : fail&quot;);
				 	//System.out.println(&quot;search by job function : maangeruserLocale property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}	
			if(maangeremail != null) {
			   maangeremailStr = maangeremail.toString();
			   if(maangeremailStr != null @and maangeremailStr.length() &gt; 0) {
			 	log.info(&quot;search by job function : maangeremail property : success&quot;);
			 	//System.out.println(&quot;search by job function : maangeremail property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by job function : maangeremail property : fail&quot;);
				 	//System.out.println(&quot;search by job function : maangeremail property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(userroleId != null) {
			   userroleIdStr = userroleId.toString();
			   if(userroleIdStr != null @and userroleIdStr.length() &gt; 0) {
			 	log.info(&quot;search by job function : userroleId property : success&quot;);
			 	//System.out.println(&quot;search by job function : userroleId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by job function : userroleId property : fail&quot;);
				 	//System.out.println(&quot;search by job function : userroleId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(rolename != null) {
			   rolenameStr = rolename.toString();
			   if(rolenameStr != null @and rolenameStr.length() &gt; 0) {
			 	log.info(&quot;search by job function : rolename property : success&quot;);
			 	//System.out.println(&quot;search by job function : rolename property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by job function : rolename property : fail&quot;);
				 	//System.out.println(&quot;search by job function : rolename property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(customerId != null) {
			   customerIdStr = customerId.toString();
			   if(customerIdStr != null @and customerIdStr.length() &gt; 0) {
			 	log.info(&quot;search by job function : customerId property : success&quot;);
			 	//System.out.println(&quot;search by job function : customerId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by job function : customerId property : fail&quot;);
				 	//System.out.println(&quot;search by job function : customerId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(teamId != null) {
			   teamIdStr = teamId.toString();
			   if(teamIdStr != null @and teamIdStr.length() &gt; 0) {
			 	log.info(&quot;search by job function : teamId property : success&quot;);
			 	//System.out.println(&quot;search by job function : teamId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by job function : teamId property : fail&quot;);
				 	//System.out.println(&quot;search by job function : teamId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(teamName != null) {
			   teamNameStr = teamName.toString();
			   if(teamNameStr != null @and teamNameStr.length() &gt; 0) {
			 	log.info(&quot;search by job function : teamName property : success&quot;);
			 	//System.out.println(&quot;search by job function : teamName property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;search by job function : teamName property : fail&quot;);
				 	//System.out.println(&quot;search by job function : teamName property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
              //System.out.println(&quot;--------------------------------------------------------&quot;);

	 } else if( (status == &quot;&quot; ) || (status == null )){
	  	log.info(&quot;search by job function : onboarding_employee_list api fail&quot;);
	 	//System.out.println(&quot;search by job function : onboarding_employee_list api fail&quot;);
	 	prev.setSuccessful(false); 	
	 } else{
	 	log.info(&quot;search by job function : onboarding_employee_list api fail&quot;);
	 	//System.out.println(&quot;search by job function : onboarding_employee_list api  fail&quot;);
	 	prev.setSuccessful(false); 
	 } 		
} catch(Exception e){
	log.info(&quot;beanshell Exception &quot;+e.getMessage());
     prev.setSuccessful(false);
} catch (FileNotFoundException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
} catch (IOException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
} catch (ParseException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-all_teams_info" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="page" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">page</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="size" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">size</stringProp>
                <stringProp name="Argument.value">15</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/team/root</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/people/list</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
            <stringProp name="VAR">code</stringProp>
            <stringProp name="JSONPATH">$.status.code</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">JsonNumberimport com.eclipsesource.json.*;

try{
	// check api success
	 String status=vars.get(&quot;code&quot;);
	 if(status.equals(&quot;1000&quot;)){
	 	log.info(&quot;team info api success&quot;);
	 	prev.setSuccessful(true); 
	
		 // json validate
			String jsonString = prev.getResponseDataAsString();
			JsonObject response = JsonObject.readFrom(jsonString);
	          JsonObject responseObject = response.get(&quot;responseObject&quot;).asObject();
			JsonArray subTeams = responseObject.get(&quot;subTeams&quot;).asArray();
			JsonNumber teamId = subTeams.get(0).asObject().get(&quot;teamId&quot;); 
	          String teamName = subTeams.get(0).asObject().get(&quot;teamName&quot;).asString(); 
	        //atrributes
			if(teamId != null) {
			   teamIdStr = teamId.toString();
			   if(teamIdStr != null @and teamIdStr.length() &gt; 0) {
			 	log.info(&quot;team info : teamId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;team info : teamId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(teamName != null) {
			   teamNameStr = teamName.toString();
			   if(teamNameStr != null @and teamNameStr.length() &gt; 0) {
			 	log.info(&quot;team info : teamName property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;team info : teamName property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
	 } else if( (status == &quot;&quot; ) || (status == null )){
	  	log.info(&quot;team info api fail&quot;);
	 	prev.setSuccessful(false); 	
	 } else{
	 	log.info(&quot;team info api fail&quot;);
	 	prev.setSuccessful(false); 
	 } 		
} catch(Exception e){
	log.info(&quot;beanshell Exception &quot;+e);
     prev.setSuccessful(false);
} catch (FileNotFoundException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
} catch (IOException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
} catch (ParseException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-team_info" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="page" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">page</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="size" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">size</stringProp>
                <stringProp name="Argument.value">15</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/team/5</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/teams/list</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
            <stringProp name="VAR">code</stringProp>
            <stringProp name="JSONPATH">$.status.code</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import com.eclipsesource.json.*;

try{
	// check api success
	 String status=vars.get(&quot;code&quot;);
	 if(status.equals(&quot;1000&quot;)){
	 	log.info(&quot;team info api success&quot;);
	 	prev.setSuccessful(true); 
	
		 // json validate
			String jsonString = prev.getResponseDataAsString();
			JsonObject response = JsonObject.readFrom(jsonString);
	          JsonObject responseObject = response.get(&quot;responseObject&quot;).asObject();
               JsonNumber teamId = responseObject.get(&quot;teamId&quot;);
               String teamName = responseObject.get(&quot;teamName&quot;)asString();

	          
	        //atrributes
			if(teamId != null) {
			   teamIdStr = teamId.toString();
			   if(teamIdStr != null @and teamIdStr.length() &gt; 0) {
			 	log.info(&quot;team info : teamId property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;team info : teamId property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
			if(teamName != null) {
			   teamNameStr = teamName.toString();
			   if(teamNameStr != null @and teamNameStr.length() &gt; 0) {
			 	log.info(&quot;team info : teamName property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;team info : teamName property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}
	 } else if( (status == &quot;&quot; ) || (status == null )){
	  	log.info(&quot;team info api fail&quot;);
	 	prev.setSuccessful(false); 	
	 } else{
	 	log.info(&quot;team info api fail&quot;);
	 	prev.setSuccessful(false); 
	 } 		
} catch(Exception e){
	log.info(&quot;beanshell Exception &quot;+e);
     prev.setSuccessful(false);
} catch (FileNotFoundException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
} catch (IOException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
} catch (ParseException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-create_team" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;teamDesc&quot;:&quot;&quot;,&quot;teamTypeId&quot;:4,&quot;teamName&quot;:&quot;${teamNameCreated}&quot;,&quot;selected_users&quot;:[],&quot;teamsSelected&quot;:[],&quot;userIds&quot;:[],&quot;teamIds&quot;:[]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/team</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/teams/list</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Date;

Date date = new Date();
//date.setDate(date.getDate());
SimpleDateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSZ&quot;);
String formattedDate = df.format(date);
String teamName = &quot;team &quot;.concat(formattedDate);
vars.put(&quot;teamNameCreated&quot;,teamName);
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
            <stringProp name="VAR">teamId</stringProp>
            <stringProp name="JSONPATH">$.responseObject.id</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
            <stringProp name="VAR">create_team</stringProp>
            <stringProp name="JSONPATH">$.status.code</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import com.eclipsesource.json.*;

try{
	// check api success
	 String status=vars.get(&quot;create_team&quot;);
	 if(status.equals(&quot;1000&quot;)){
	 	log.info(&quot;create_team api success&quot;);
	 	//System.out.println(&quot;create_team api success&quot;);
	 	prev.setSuccessful(true); 
	
          // json validation
			String jsonString = prev.getResponseDataAsString();
			JsonObject response = JsonObject.readFrom(jsonString);
	          JsonObject responseObject = response.get(&quot;responseObject&quot;).asObject();          
               JsonNumber id = responseObject.get(&quot;id&quot;);
	    // atrributes
			if(id != null) {
			   idStr = id.toString();
			   if(idStr != null @and idStr.length() &gt; 0) {
			 	log.info(&quot;create team : id property : success&quot;);
			 	//System.out.println(&quot;create team : id property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;create team : id property : fail&quot;);
				 	//System.out.println(&quot;create team : id property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}

	 } else if( (status == &quot;&quot; ) || (status == null )){
	  	log.info(&quot;create_team api fail&quot;);
	 	//System.out.println(&quot;create_team api fail&quot;);
	 	prev.setSuccessful(false); 	
	 } else{
	 	log.info(&quot;create_team fail&quot;);
	 	//System.out.println(&quot;create_team api  fail&quot;);
	 	prev.setSuccessful(false); 
	 } 		
} catch(Exception e){
	log.info(&quot;beanshell Exception &quot;+e.getMessage());
     prev.setSuccessful(false);
} catch (FileNotFoundException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
} catch (IOException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
} catch (ParseException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-team_exists_with_same_name/(to fail)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;teamDesc&quot;:&quot;&quot;,&quot;teamTypeId&quot;:4,&quot;teamName&quot;:&quot;${teamNameCreated}&quot;,&quot;selected_users&quot;:[],&quot;teamsSelected&quot;:[],&quot;userIds&quot;:[],&quot;teamIds&quot;:[]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/team</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/teams/list</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
            <stringProp name="VAR">code</stringProp>
            <stringProp name="JSONPATH">$.status.code</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1048&quot;)){
 	log.info(&quot;api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-create child team " enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;teamDesc&quot;:&quot;&quot;,&quot;teamTypeId&quot;:4,&quot;teamName&quot;:&quot;${childteamNameCreated}&quot;,&quot;selected_users&quot;:[],&quot;teamsSelected&quot;:[],&quot;userIds&quot;:[],&quot;teamIds&quot;:[]}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/team</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/teams/list</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Date;

Date date = new Date();
//date.setDate(date.getDate());
SimpleDateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss.SSSZ&quot;);
String formattedDate = df.format(date);
String teamName = &quot;team &quot;.concat(formattedDate);
vars.put(&quot;childteamNameCreated&quot;,teamName);
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
            <stringProp name="VAR">childTeamId</stringProp>
            <stringProp name="JSONPATH">$.responseObject.id</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
            <stringProp name="VAR">child_team</stringProp>
            <stringProp name="JSONPATH">$.status.code</stringProp>
            <stringProp name="DEFAULT">BNOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import com.eclipsesource.json.*;

try{
	// check api success
	 String status=vars.get(&quot;child_team&quot;);
	 if(status.equals(&quot;1000&quot;)){
	 	log.info(&quot;child_team api success&quot;);
	 	//System.out.println(&quot;child_team api success&quot;);
	 	prev.setSuccessful(true); 
	
          // json validation
			String jsonString = prev.getResponseDataAsString();
			JsonObject response = JsonObject.readFrom(jsonString);
	          JsonObject responseObject = response.get(&quot;responseObject&quot;).asObject();          
               JsonNumber id = responseObject.get(&quot;id&quot;);
	    // atrributes
			if(id != null) {
			   idStr = id.toString();
			   if(idStr != null @and idStr.length() &gt; 0) {
			 	log.info(&quot;child_team : id property : success&quot;);
			 	//System.out.println(&quot;child_team : id property : success&quot;);
			 	prev.setSuccessful(true); 
			   } else{
				 	log.info(&quot;child_team : id property : fail&quot;);
				 	//System.out.println(&quot;child_team : id property : fail&quot;);
				 	prev.setSuccessful(false); 		   	
			   }
			}

	 } else if( (status == &quot;&quot; ) || (status == null )){
	  	log.info(&quot;child_team api fail&quot;);
	 	//System.out.println(&quot;child_team api fail&quot;);
	 	prev.setSuccessful(false); 	
	 } else{
	 	log.info(&quot;child_team fail&quot;);
	 	//System.out.println(&quot;child_team api  fail&quot;);
	 	prev.setSuccessful(false); 
	 } 		
} catch(Exception e){
	log.info(&quot;beanshell Exception &quot;+e.getMessage());
     prev.setSuccessful(false);
} catch (FileNotFoundException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
} catch (IOException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
} catch (ParseException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-move team" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;customer_id&quot;:3,&quot;team_id&quot;:&quot;${childTeamId}&quot;,&quot;parent_id&quot;:&quot;${teamId}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/team/${childTeamId}/parent/${teamId}</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/teams/list</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
            <stringProp name="VAR">code</stringProp>
            <stringProp name="JSONPATH">$.status.code</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1000&quot;)){
 	log.info(&quot;api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-delete parent team (has sub team) / to fail" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/team/${teamId}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/teams/list</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
            <stringProp name="VAR">code</stringProp>
            <stringProp name="JSONPATH">$.status.code</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1038&quot;)){
 	log.info(&quot;api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-delete child team" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/team/${childTeamId}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/teams/list</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
            <stringProp name="VAR">delete_child_team</stringProp>
            <stringProp name="JSONPATH">$.status.code</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import com.eclipsesource.json.*;

try{
	// check api success
	 String status=vars.get(&quot;delete_child_team&quot;);
	 if(status.equals(&quot;1000&quot;)){
	 	log.info(&quot;delete_child_team api success&quot;);
	 	//System.out.println(&quot;delete_child_team api success&quot;);
	 	prev.setSuccessful(true); 
	

	 } else if( (status == &quot;&quot; ) || (status == null )){
	  	log.info(&quot;delete_child_team api fail&quot;);
	 	//System.out.println(&quot;delete_child_team api fail&quot;);
	 	prev.setSuccessful(false); 	
	 } else{
	 	log.info(&quot;delete_child_team api fail&quot;);
	 	//System.out.println(&quot;delete_child_team api  fail&quot;);
	 	prev.setSuccessful(false); 
	 } 		
} catch(Exception e){
	log.info(&quot;beanshell Exception &quot;+e.getMessage());
     prev.setSuccessful(false);
} catch (FileNotFoundException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
} catch (IOException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
} catch (ParseException e) {
    e.printStackTrace();
    prev.setSuccessful(false);
}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
            <stringProp name="VAR">code</stringProp>
            <stringProp name="JSONPATH">$.status.code</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1000&quot;)){
 	log.info(&quot;api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-edit team" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;teamName&quot;:&quot;${teamNameCreated}&quot;,&quot;userIds&quot;:[2],&quot;teamIds&quot;:[],&quot;teamTypeId&quot;:4}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/team/${teamId}</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/teams/list</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
            <stringProp name="VAR">code</stringProp>
            <stringProp name="JSONPATH">$.status.code</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1000&quot;)){
 	log.info(&quot;api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-delete team - with user/(to fail)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/team/${teamId}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/teams/list</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
            <stringProp name="VAR">code</stringProp>
            <stringProp name="JSONPATH">$.status.code</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1037&quot;)){
 	log.info(&quot;api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-remove user" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;teamName&quot;:&quot;${teamNameCreated}&quot;,&quot;userIds&quot;:[],&quot;teamIds&quot;:[],&quot;teamTypeId&quot;:4}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/team/${teamId}</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/teams/28</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
            <stringProp name="VAR">code</stringProp>
            <stringProp name="JSONPATH">$.status.code</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1000&quot;)){
 	log.info(&quot;api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-delete team with user/(to pass)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">peoplehum.qa</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/onboarding-h/v3/customer/3/team/${teamId}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://peoplehum.qa/main/app/manage/teams/list</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:57.0) Gecko/20100101 Firefox/57.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
            <stringProp name="VAR">code</stringProp>
            <stringProp name="JSONPATH">$.status.code</stringProp>
            <stringProp name="DEFAULT">NOT_FOUND</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">String login = vars.get(&quot;code&quot;);
 if(login.equals(&quot;1000&quot;)){
 	log.info(&quot;api success&quot;);
 	prev.setSuccessful(true); 
 } else{
 	log.info(&quot;api fail&quot;);
 	prev.setSuccessful(false); 
 }</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="pH-Onboarding-Individual" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1511958678000</longProp>
        <longProp name="ThreadGroup.end_time">1511958678000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Onboarding-Login-Individual" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;username&quot;:&quot;${username-Individual}&quot;,&quot;password&quot;:&quot;${password-Individual}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">peoplehum.dev</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/internal-api/login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://peoplehum.dev/login</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:56.0) Gecko/20100101 Firefox/56.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="pH-Onboarding-Executive" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1512469714000</longProp>
        <longProp name="ThreadGroup.end_time">1512469714000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="pH-Onboarding-Lead" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1512469770000</longProp>
        <longProp name="ThreadGroup.end_time">1512469770000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="pH-Onboarding-Recruiter" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1512469813000</longProp>
        <longProp name="ThreadGroup.end_time">1512469813000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree/>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree>
      <ProxyControl guiclass="ProxyControlGui" testclass="ProxyControl" testname="HTTP(S) Test Script Recorder" enabled="true">
        <stringProp name="ProxyControlGui.port">8888</stringProp>
        <collectionProp name="ProxyControlGui.exclude_list"/>
        <collectionProp name="ProxyControlGui.include_list"/>
        <boolProp name="ProxyControlGui.capture_http_headers">true</boolProp>
        <intProp name="ProxyControlGui.grouping_mode">4</intProp>
        <boolProp name="ProxyControlGui.add_assertion">false</boolProp>
        <stringProp name="ProxyControlGui.sampler_type_name"></stringProp>
        <boolProp name="ProxyControlGui.sampler_redirect_automatically">false</boolProp>
        <boolProp name="ProxyControlGui.sampler_follow_redirects">true</boolProp>
        <boolProp name="ProxyControlGui.use_keepalive">true</boolProp>
        <boolProp name="ProxyControlGui.sampler_download_images">false</boolProp>
        <stringProp name="ProxyControlGui.proxy_prefix_http_sampler_name"></stringProp>
        <boolProp name="ProxyControlGui.notify_child_sl_filtered">true</boolProp>
        <boolProp name="ProxyControlGui.regex_match">false</boolProp>
        <stringProp name="ProxyControlGui.content_type_include"></stringProp>
        <stringProp name="ProxyControlGui.content_type_exclude"></stringProp>
        <stringProp name="ProxyControlGui.proxy_pause_http_sampler"></stringProp>
      </ProxyControl>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
